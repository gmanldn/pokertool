name: PokerTool CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pokertool_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: pokertool-frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd pokertool-frontend
        npm ci

    - name: Build frontend
      run: |
        cd pokertool-frontend
        npm run build

    - name: Run Python tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pokertool_test
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key
        ENVIRONMENT: test
      run: |
        python -m pytest tests/ -v --cov=src/pokertool --cov-report=xml --cov-report=html

    - name: Run frontend tests
      run: |
        cd pokertool-frontend
        npm test -- --coverage --watchAll=false

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.xml
        flags: backend
        name: backend-coverage

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./pokertool-frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit 'safety==2.3.5'
        npm install -g audit-ci

    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt

    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check || true

    - name: Frontend security audit
      run: |
        cd pokertool-frontend
        npm audit --audit-level moderate || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' || github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  gui-preview:
    name: Build GUI Preview Binaries
    runs-on: ${{ matrix.os }}
    needs: test
    if: github.ref == 'refs/heads/develop'
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
        python -m pip install pyinstaller pillow
      shell: bash

    - name: Generate launcher assets
      run: python scripts/generate_launcher_assets.py
      shell: bash

    - name: Build GUI preview bundle
      run: python scripts/build_gui_preview.py --no-archive
      shell: bash

    - name: macOS codesign (optional)
      if: matrix.os == 'macos-latest'
      env:
        SIGNING_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY }}
        SIGNING_OPTIONS: ${{ secrets.MACOS_SIGNING_OPTIONS }}
      run: |
        if [ -n "$SIGNING_IDENTITY" ]; then
          echo "Signing with identity: $SIGNING_IDENTITY"
          codesign --deep --force --options runtime $SIGNING_OPTIONS \
            --sign "$SIGNING_IDENTITY" dist/PokerToolGUI/PokerToolGUI.app || exit 1
        else
          echo "Skipping macOS signing; MACOS_SIGNING_IDENTITY not set."
        fi
      shell: bash

    - name: Windows code signing (optional)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      env:
        WINDOWS_PFX: ${{ secrets.WINDOWS_CODE_SIGNING_PFX }}
        WINDOWS_PFX_PASSWORD: ${{ secrets.WINDOWS_CODE_SIGNING_PASSWORD }}
      run: |
        if (-not [string]::IsNullOrEmpty($env:WINDOWS_PFX)) {
          $certPath = Join-Path $env:RUNNER_TEMP 'signing.pfx'
          [IO.File]::WriteAllBytes($certPath, [Convert]::FromBase64String($env:WINDOWS_PFX))
          signtool import /f $certPath /p $env:WINDOWS_PFX_PASSWORD /q
          signtool sign /fd SHA256 /tr http://timestamp.digicert.com /td SHA256 `
            /f $certPath /p $env:WINDOWS_PFX_PASSWORD dist\\PokerToolGUI\\PokerToolGUI.exe
        } else {
          Write-Host \"Skipping Windows signing; certificate secret not provided.\"
        }

    - name: Create GUI preview archive
      run: python scripts/build_gui_preview.py --skip-build
      shell: bash

    - name: Prepare artifact
      run: |
        mkdir -p artifacts
        mv artifacts/pokertool-gui-preview.zip artifacts/pokertool-gui-preview-${{ matrix.os }}.zip
      shell: bash

    - name: Upload GUI preview artifact
      uses: actions/upload-artifact@v4
      with:
        name: pokertool-gui-preview-${{ matrix.os }}
        path: artifacts/pokertool-gui-preview-${{ matrix.os }}.zip

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

    - name: Deploy to staging
      run: |
        # Update image in deployment
        kubectl set image deployment/pokertool-app pokertool=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop -n pokertool-staging
        
        # Wait for rollout
        kubectl rollout status deployment/pokertool-app -n pokertool-staging --timeout=300s

    - name: Run smoke tests
      run: |
        # Wait for service to be ready
        kubectl wait --for=condition=available deployment/pokertool-app -n pokertool-staging --timeout=300s
        
        # Get service URL
        STAGING_URL=$(kubectl get service pokertool-lb -n pokertool-staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Run basic health check
        curl -f "http://$STAGING_URL/health" || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Deploy to production
      run: |
        # Update image in deployment
        kubectl set image deployment/pokertool-app pokertool=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }} -n pokertool
        
        # Wait for rollout
        kubectl rollout status deployment/pokertool-app -n pokertool --timeout=600s

    - name: Run production smoke tests
      run: |
        # Wait for service to be ready
        kubectl wait --for=condition=available deployment/pokertool-app -n pokertool --timeout=600s
        
        # Get service URL
        PROD_URL=$(kubectl get service pokertool-lb -n pokertool -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Run comprehensive health checks
        curl -f "http://$PROD_URL/health" || exit 1
        curl -f "http://$PROD_URL/api/v1/health" || exit 1

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "✅ PokerTool ${{ github.event.release.tag_name }} deployed successfully to production!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      if: success()

    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "❌ PokerTool ${{ github.event.release.tag_name }} deployment to production failed!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      if: failure()

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')

    steps:
    - name: Delete old container images
      uses: actions/delete-package-versions@v4
      with:
        package-name: pokertool
        package-type: container
        min-versions-to-keep: 10
        delete-only-untagged-versions: true
