# POKERTOOL-HEADER-START
# ---
# schema: pokerheader.v1
# project: pokertool
# file: pokertool-frontend/node_modules/eslint-plugin-jsx-a11y/__tests__/src/util/isDisabledElement-test.js
# version: v28.0.0
# last_commit: '2025-09-25T18:50:22+01:00'
# fixes:
# - date: '2025-09-25'
#   summary: Enhanced enterprise documentation and comprehensive unit tests added
# ---
# POKERTOOL-HEADER-END
import test from 'tape';

import isDisabledElement from '../../../src/util/isDisabledElement';
import JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';

test('isDisabledElement', (t) => {
  t.test('HTML5', (st) => {
    st.equal(
      isDisabledElement([
        JSXAttributeMock('disabled', 'disabled'),
      ]),
      true,
      'identifies HTML5 disabled elements',
    );

    st.equal(
      isDisabledElement([
        JSXAttributeMock('disabled', null),
      ]),
      true,
      'identifies HTML5 disabled elements with null as the value',
    );

    st.equal(
      isDisabledElement([
        JSXAttributeMock('disabled', undefined),
      ]),
      false,
      'does not identify HTML5 disabled elements with undefined as the value',
    );

    st.end();
  });

  t.test('ARIA', (st) => {
    st.equal(
      isDisabledElement([
        JSXAttributeMock('aria-disabled', 'true'),
      ]),
      true,
      'does not identify ARIA disabled elements',
    );

    st.equal(
      isDisabledElement([
        JSXAttributeMock('aria-disabled', true),
      ]),
      true,
      'does not identify ARIA disabled elements',
    );

    st.equal(
      isDisabledElement([
        JSXAttributeMock('aria-disabled', 'false'),
      ]),
      false,
      'does not identify ARIA disabled elements',
    );

    st.equal(
      isDisabledElement([
        JSXAttributeMock('aria-disabled', false),
      ]),
      false,
      'does not identify ARIA disabled elements',
    );

    st.equal(
      isDisabledElement([
        JSXAttributeMock('aria-disabled', null),
      ]),
      false,
      'does not identify ARIA disabled elements with null as the value',
    );

    st.equal(
      isDisabledElement([
        JSXAttributeMock('aria-disabled', undefined),
      ]),
      false,
      'does not identify ARIA disabled elements with undefined as the value',
    );

    st.end();
  });

  t.end();
});
