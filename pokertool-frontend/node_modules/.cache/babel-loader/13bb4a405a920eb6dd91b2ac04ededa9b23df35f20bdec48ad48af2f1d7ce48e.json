{"ast":null,"code":"import{useState,useEffect,useCallback,useRef}from'react';export const useWebSocket=url=>{const[connected,setConnected]=useState(false);const[messages,setMessages]=useState([]);const socketRef=useRef(null);const reconnectTimeoutRef=useRef(null);const reconnectAttempts=useRef(0);const maxReconnectAttempts=5;const reconnectDelay=1000;const connect=useCallback(()=>{try{// For demo purposes, use a mock user_id and token\n// In production, these would come from authentication context\nconst userId='demo_user';const token='demo_token';// Convert HTTP URL to WebSocket URL and add authentication parameters\nconst wsUrl=url.replace('http://','ws://').replace('https://','wss://');const fullUrl=\"\".concat(wsUrl,\"/ws/\").concat(userId,\"?token=\").concat(token);console.log('Connecting to WebSocket:',fullUrl);socketRef.current=new WebSocket(fullUrl);socketRef.current.onopen=()=>{console.log('WebSocket connected');setConnected(true);reconnectAttempts.current=0;};socketRef.current.onclose=event=>{console.log('WebSocket disconnected:',event.code,event.reason);setConnected(false);// Attempt to reconnect if not manually closed\nif(event.code!==1000&&reconnectAttempts.current<maxReconnectAttempts){reconnectAttempts.current+=1;console.log(\"Reconnect attempt \".concat(reconnectAttempts.current,\"/\").concat(maxReconnectAttempts));reconnectTimeoutRef.current=setTimeout(()=>{connect();},reconnectDelay*reconnectAttempts.current);}};socketRef.current.onmessage=event=>{try{const data=JSON.parse(event.data);const message={type:data.type||'message',data:data.data||data,timestamp:Date.now()};console.log('WebSocket message received:',message);setMessages(prev=>[...prev,message]);}catch(error){console.error('Failed to parse WebSocket message:',error);}};socketRef.current.onerror=error=>{console.error('WebSocket error:',error);const message={type:'error',data:{error:'WebSocket connection error'},timestamp:Date.now()};setMessages(prev=>[...prev,message]);};}catch(error){console.error('Failed to create WebSocket connection:',error);}},[url]);useEffect(()=>{connect();return()=>{if(reconnectTimeoutRef.current){clearTimeout(reconnectTimeoutRef.current);}if(socketRef.current){socketRef.current.close(1000,'Component unmounting');}};},[connect]);const sendMessage=useCallback(message=>{if(socketRef.current&&socketRef.current.readyState===WebSocket.OPEN){try{const messageData=typeof message==='string'?message:JSON.stringify(message);socketRef.current.send(messageData);console.log('Message sent:',message);}catch(error){console.error('Failed to send WebSocket message:',error);}}else{console.warn('WebSocket is not connected');}},[]);const clearMessages=useCallback(()=>{setMessages([]);},[]);return{connected,messages,sendMessage,clearMessages};};// Custom hook for subscribing to specific message types\nexport const useWebSocketSubscription=(messages,messageType)=>{const[filteredMessages,setFilteredMessages]=useState([]);useEffect(()=>{const filtered=messages.filter(msg=>msg.type===messageType);setFilteredMessages(filtered);},[messages,messageType]);return filteredMessages;};","map":{"version":3,"names":["useState","useEffect","useCallback","useRef","useWebSocket","url","connected","setConnected","messages","setMessages","socketRef","reconnectTimeoutRef","reconnectAttempts","maxReconnectAttempts","reconnectDelay","connect","userId","token","wsUrl","replace","fullUrl","concat","console","log","current","WebSocket","onopen","onclose","event","code","reason","setTimeout","onmessage","data","JSON","parse","message","type","timestamp","Date","now","prev","error","onerror","clearTimeout","close","sendMessage","readyState","OPEN","messageData","stringify","send","warn","clearMessages","useWebSocketSubscription","messageType","filteredMessages","setFilteredMessages","filtered","filter","msg"],"sources":["/Users/georgeridout/Documents/github/pokertool/pokertool-frontend/src/hooks/useWebSocket.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react';\n\nexport interface WebSocketMessage {\n  type: string;\n  data: any;\n  timestamp: number;\n}\n\ninterface UseWebSocketReturn {\n  connected: boolean;\n  messages: WebSocketMessage[];\n  sendMessage: (message: any) => void;\n  clearMessages: () => void;\n}\n\nexport const useWebSocket = (url: string): UseWebSocketReturn => {\n  const [connected, setConnected] = useState(false);\n  const [messages, setMessages] = useState<WebSocketMessage[]>([]);\n  const socketRef = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const reconnectAttempts = useRef(0);\n  const maxReconnectAttempts = 5;\n  const reconnectDelay = 1000;\n\n  const connect = useCallback(() => {\n    try {\n      // For demo purposes, use a mock user_id and token\n      // In production, these would come from authentication context\n      const userId = 'demo_user';\n      const token = 'demo_token';\n      \n      // Convert HTTP URL to WebSocket URL and add authentication parameters\n      const wsUrl = url.replace('http://', 'ws://').replace('https://', 'wss://');\n      const fullUrl = `${wsUrl}/ws/${userId}?token=${token}`;\n      \n      console.log('Connecting to WebSocket:', fullUrl);\n      socketRef.current = new WebSocket(fullUrl);\n\n      socketRef.current.onopen = () => {\n        console.log('WebSocket connected');\n        setConnected(true);\n        reconnectAttempts.current = 0;\n      };\n\n      socketRef.current.onclose = (event) => {\n        console.log('WebSocket disconnected:', event.code, event.reason);\n        setConnected(false);\n        \n        // Attempt to reconnect if not manually closed\n        if (event.code !== 1000 && reconnectAttempts.current < maxReconnectAttempts) {\n          reconnectAttempts.current += 1;\n          console.log(`Reconnect attempt ${reconnectAttempts.current}/${maxReconnectAttempts}`);\n          \n          reconnectTimeoutRef.current = setTimeout(() => {\n            connect();\n          }, reconnectDelay * reconnectAttempts.current);\n        }\n      };\n\n      socketRef.current.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          const message: WebSocketMessage = {\n            type: data.type || 'message',\n            data: data.data || data,\n            timestamp: Date.now(),\n          };\n          \n          console.log('WebSocket message received:', message);\n          setMessages(prev => [...prev, message]);\n        } catch (error) {\n          console.error('Failed to parse WebSocket message:', error);\n        }\n      };\n\n      socketRef.current.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        const message: WebSocketMessage = {\n          type: 'error',\n          data: { error: 'WebSocket connection error' },\n          timestamp: Date.now(),\n        };\n        setMessages(prev => [...prev, message]);\n      };\n    } catch (error) {\n      console.error('Failed to create WebSocket connection:', error);\n    }\n  }, [url]);\n\n  useEffect(() => {\n    connect();\n\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      if (socketRef.current) {\n        socketRef.current.close(1000, 'Component unmounting');\n      }\n    };\n  }, [connect]);\n\n  const sendMessage = useCallback((message: any) => {\n    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\n      try {\n        const messageData = typeof message === 'string' ? message : JSON.stringify(message);\n        socketRef.current.send(messageData);\n        console.log('Message sent:', message);\n      } catch (error) {\n        console.error('Failed to send WebSocket message:', error);\n      }\n    } else {\n      console.warn('WebSocket is not connected');\n    }\n  }, []);\n\n  const clearMessages = useCallback(() => {\n    setMessages([]);\n  }, []);\n\n  return {\n    connected,\n    messages,\n    sendMessage,\n    clearMessages,\n  };\n};\n\n// Custom hook for subscribing to specific message types\nexport const useWebSocketSubscription = (\n  messages: WebSocketMessage[],\n  messageType: string\n): WebSocketMessage[] => {\n  const [filteredMessages, setFilteredMessages] = useState<WebSocketMessage[]>([]);\n\n  useEffect(() => {\n    const filtered = messages.filter(msg => msg.type === messageType);\n    setFilteredMessages(filtered);\n  }, [messages, messageType]);\n\n  return filteredMessages;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}