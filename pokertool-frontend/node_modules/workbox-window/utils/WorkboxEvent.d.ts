# POKERTOOL-HEADER-START
# ---
# schema: pokerheader.v1
# project: pokertool
# file: pokertool-frontend/node_modules/workbox-window/utils/WorkboxEvent.d.ts
# version: v28.0.0
# last_commit: '2025-09-23T07:20:25+01:00'
# fixes:
# - date: '2025-09-25'
#   summary: Enhanced enterprise documentation and comprehensive unit tests added
# ---
# POKERTOOL-HEADER-END
import { WorkboxEventTarget } from './WorkboxEventTarget.js';
import '../_version.js';
/**
 * A minimal `Event` subclass shim.
 * This doesn't *actually* subclass `Event` because not all browsers support
 * constructable `EventTarget`, and using a real `Event` will error.
 * @private
 */
export declare class WorkboxEvent<K extends keyof WorkboxEventMap> {
    type: K;
    target?: WorkboxEventTarget;
    sw?: ServiceWorker;
    originalEvent?: Event;
    isExternal?: boolean;
    constructor(type: K, props: Omit<WorkboxEventMap[K], 'target' | 'type'>);
}
export interface WorkboxMessageEvent extends WorkboxEvent<'message'> {
    data: any;
    originalEvent: Event;
    ports: readonly MessagePort[];
}
export interface WorkboxLifecycleEvent extends WorkboxEvent<keyof WorkboxLifecycleEventMap> {
    isUpdate?: boolean;
}
export interface WorkboxLifecycleWaitingEvent extends WorkboxLifecycleEvent {
    wasWaitingBeforeRegister?: boolean;
}
export interface WorkboxLifecycleEventMap {
    installing: WorkboxLifecycleEvent;
    installed: WorkboxLifecycleEvent;
    waiting: WorkboxLifecycleWaitingEvent;
    activating: WorkboxLifecycleEvent;
    activated: WorkboxLifecycleEvent;
    controlling: WorkboxLifecycleEvent;
    redundant: WorkboxLifecycleEvent;
}
export interface WorkboxEventMap extends WorkboxLifecycleEventMap {
    message: WorkboxMessageEvent;
}
