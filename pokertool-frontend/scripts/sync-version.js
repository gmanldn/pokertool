#!/usr/bin/env node
'use strict';

const fs = require('fs');
const path = require('path');

const projectRoot = path.resolve(__dirname, '..');
const repoRoot = path.resolve(projectRoot, '..');
const versionFilePath = path.join(repoRoot, 'VERSION');
const outputPath = path.join(projectRoot, 'src', 'config', 'releaseVersion.ts');

const readReleaseVersion = () => {
  try {
    const content = fs.readFileSync(versionFilePath, 'utf8');
    const match = content.match(/^\s*version\s*=\s*([0-9]+\.[0-9]+\.[0-9]+)/m);
    if (!match) {
      throw new Error('Release version not found in VERSION file');
    }
    return match[1].trim();
  } catch (error) {
    console.error('[sync-version] Failed to read VERSION file:', error.message);
    process.exit(1);
  }
};

const writeReleaseModule = (version) => {
  const banner = `/* eslint-disable */\n// AUTO-GENERATED FILE. DO NOT EDIT.\n// Generated by scripts/sync-version.js\n`;
  const contents = `${banner}export const RELEASE_VERSION = 'v${version}';\n`;
  fs.mkdirSync(path.dirname(outputPath), { recursive: true });
  fs.writeFileSync(outputPath, contents, 'utf8');
  console.log(`[sync-version] Synced release version v${version} -> ${path.relative(projectRoot, outputPath)}`);
};

const version = readReleaseVersion();
writeReleaseModule(version);
