apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: pokertool-hpa
  namespace: pokertool
  labels:
    app: pokertool
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: pokertool-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
  # CPU-based scaling
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  # Memory-based scaling
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  # Custom metrics - requests per second
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "30"
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 30
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 1
        periodSeconds: 300
      selectPolicy: Min
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: postgres-hpa
  namespace: pokertool
  labels:
    app: pokertool-postgres
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: pokertool-postgres
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Pods
        value: 1
        periodSeconds: 180
    scaleDown:
      stabilizationWindowSeconds: 600
      policies:
      - type: Pods
        value: 1
        periodSeconds: 600
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: redis-hpa
  namespace: pokertool
  labels:
    app: pokertool-redis
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: pokertool-redis
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 45
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 120
---
# Vertical Pod Autoscaler for right-sizing resources
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: pokertool-vpa
  namespace: pokertool
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: pokertool-app
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
    - containerName: pokertool
      minAllowed:
        cpu: 100m
        memory: 256Mi
      maxAllowed:
        cpu: 2000m
        memory: 4Gi
      controlledResources: ["cpu", "memory"]
      controlledValues: RequestsAndLimits
---
# Pod Disruption Budget to ensure availability during scaling
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: pokertool-pdb
  namespace: pokertool
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: pokertool
      component: backend
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: postgres-pdb
  namespace: pokertool
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: pokertool
      component: database
---
# Custom Resource Definition for PokerTool-specific metrics
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: pokertoolmetrics.monitoring.pokertool.io
spec:
  group: monitoring.pokertool.io
  versions:
  - name: v1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            properties:
              metricName:
                type: string
              threshold:
                type: integer
              query:
                type: string
          status:
            type: object
            properties:
              currentValue:
                type: integer
              lastUpdated:
                type: string
  scope: Namespaced
  names:
    plural: pokertoolmetrics
    singular: pokertoolmetric
    kind: PokerToolMetric
---
# Custom metrics for poker-specific scaling
apiVersion: monitoring.pokertool.io/v1
kind: PokerToolMetric
metadata:
  name: active-tables-metric
  namespace: pokertool
spec:
  metricName: "active_tables_count"
  threshold: 50
  query: "sum(pokertool_active_tables_total)"
---
apiVersion: monitoring.pokertool.io/v1
kind: PokerToolMetric
metadata:
  name: concurrent-users-metric
  namespace: pokertool
spec:
  metricName: "concurrent_users_count"
  threshold: 100
  query: "sum(pokertool_concurrent_users_total)"
---
# KEDA ScaledObject for advanced autoscaling based on custom metrics
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: pokertool-keda-scaler
  namespace: pokertool
spec:
  scaleTargetRef:
    name: pokertool-app
  pollingInterval: 15
  cooldownPeriod: 300
  idleReplicaCount: 2
  minReplicaCount: 2
  maxReplicaCount: 15
  triggers:
  # Prometheus-based scaling
  - type: prometheus
    metadata:
      serverAddress: http://prometheus-service.monitoring.svc.cluster.local:9090
      metricName: pokertool_active_sessions
      threshold: '25'
      query: sum(pokertool_active_sessions_total)
  # Redis-based scaling for queue length
  - type: redis
    metadata:
      address: pokertool-redis.pokertool.svc.cluster.local:6379
      listName: pokertool_task_queue
      listLength: '10'
  # CPU-based trigger as fallback
  - type: cpu
    metadata:
      type: Utilization
      value: '75'
---
# Network Policy for autoscaling components
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: autoscaling-network-policy
  namespace: pokertool
spec:
  podSelector:
    matchLabels:
      app: pokertool
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: metrics-server
    - podSelector:
        matchLabels:
          app: prometheus
    - podSelector:
        matchLabels:
          app: keda-operator
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: pokertool-postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: pokertool-redis
    ports:
    - protocol: TCP
      port: 6379
  - {} # Allow all outbound traffic for external services
---
# Service Monitor for Prometheus to scrape autoscaling metrics
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: pokertool-autoscaling-monitor
  namespace: monitoring
  labels:
    app: pokertool-autoscaling
spec:
  selector:
    matchLabels:
      app: pokertool
  endpoints:
  - port: http
    path: /metrics
    interval: 15s
    scrapeTimeout: 10s
  namespaceSelector:
    matchNames:
    - pokertool
---
# PrometheusRule for autoscaling alerts
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: pokertool-autoscaling-rules
  namespace: monitoring
spec:
  groups:
  - name: pokertool.autoscaling
    rules:
    - alert: PokerToolHighLoad
      expr: |
        (
          sum(rate(pokertool_http_requests_total[5m])) > 100
        ) and (
          sum(kube_deployment_status_replicas{deployment="pokertool-app"}) < 5
        )
      for: 2m
      labels:
        severity: warning
        component: autoscaling
      annotations:
        summary: "PokerTool is experiencing high load"
        description: "PokerTool is receiving {{ $value }} requests/second but only has {{ query \"sum(kube_deployment_status_replicas{deployment=\\\"pokertool-app\\\"})\" | first | value }} replicas"
    
    - alert: PokerToolMaxReplicasReached
      expr: |
        sum(kube_deployment_status_replicas{deployment="pokertool-app"}) >= 10
      for: 1m
      labels:
        severity: critical
        component: autoscaling
      annotations:
        summary: "PokerTool has reached maximum replica count"
        description: "PokerTool deployment has scaled to {{ $value }} replicas (maximum configured)"
    
    - alert: PokerToolAutoscalerDown
      expr: |
        up{job="kube-state-metrics", instance=~".*hpa.*"} == 0
      for: 5m
      labels:
        severity: critical
        component: autoscaling
      annotations:
        summary: "PokerTool HPA is not functioning"
        description: "Horizontal Pod Autoscaler for PokerTool appears to be down"
    
    - alert: PokerToolUnderutilized
      expr: |
        (
          avg(rate(pokertool_http_requests_total[10m])) < 5
        ) and (
          sum(kube_deployment_status_replicas{deployment="pokertool-app"}) > 3
        )
      for: 10m
      labels:
        severity: info
        component: autoscaling
      annotations:
        summary: "PokerTool may be over-provisioned"
        description: "PokerTool is receiving only {{ $value }} requests/second but has {{ query \"sum(kube_deployment_status_replicas{deployment=\\\"pokertool-app\\\"})\" | first | value }} replicas"
