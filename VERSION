# PokerTool Version Information
# This file tracks the main application version and individual component versions
# to prevent feature regression and ensure all features remain actively used.

[main]
version = 96.5.0
release_date = 2025-10-21

[release_notes]
# v96.5.0 - Internationalization Support
description = Minor release adding comprehensive i18next-based internationalization infrastructure with English and Spanish translations.
changes = Installed i18next v24.2.0, react-i18next v16.0.0, and i18next-browser-languagedetector v8.0.2 (23.74kB to main bundle). Created i18n configuration (src/i18n/i18n.ts) with automatic language detection from browser settings and localStorage caching. Created English (en.json) and Spanish (es.json) translation files with 100+ translation keys covering app navigation (Dashboard, Backend, TODO, Tables, etc.), status messages (Connected, Offline, Backend Online/Offline/Starting), backend monitoring (Startup Progress, Tasks Timeline, Working, Waiting), TODO list interface, and common UI elements (Loading, Error, Success, buttons). Integrated i18next into index.tsx for early initialization before React app loads. Updated Navigation component to use useTranslation hook with translated strings for app title (supports both full and short variants), connection status chips, and dark mode label. Configured number and date formatting via i18n interpolation for consistent locale-aware formatting. Translation infrastructure fully extensible - new languages can be added by creating new JSON files in src/i18n/locales/. Language can be changed programmatically via i18n.changeLanguage('es') or automatically detected from user's browser/localStorage preferences.
status = stable

# v96.4.0 - Real-Time Backend Startup Monitoring
# description = Minor release adding WebSocket-based real-time backend startup status monitoring with instant updates showing current step progress.
# changes = Created WebSocket endpoint /ws/backend-startup in api.py (146 lines) for real-time startup status broadcasts. WebSocket polls backend status every 500ms and pushes updates only when status changes. Added current_step_info extraction showing in-progress step name, description, and number. Updated Navigation.tsx to connect to WebSocket with automatic reconnection and 500ms fallback HTTP polling. Enhanced top-right backend status indicator to show "Waiting for [step name] (X%)" or "Starting: [step name] (X%)" with live step updates. Added current step details to status tooltip showing step description. Updated Backend Status page (BackendStatus.tsx) to use WebSocket for instant step-by-step progress updates. Replaced 2-second HTTP polling with WebSocket + 500ms fallback polling on both Navigation and Backend Status pages. Users now see immediate backend startup progress with step names, descriptions, and percentages updating in real-time without page refresh.
# status = stable

# v96.3.0 - API Load Testing with Locust
# description = Minor release adding comprehensive Locust-based load testing for critical API endpoints with automated performance threshold validation.
# changes = Installed Locust v2.42.0 load testing framework with 24 dependencies including gevent, flask, and python-socketio. Created tests/load/locustfile.py (255 lines) implementing 3 user behavior classes simulating realistic load patterns: HealthCheckUser (monitoring systems, 20% of users, 1-3s between requests), DashboardUser (typical frontend users, 50% of users, 3-10s page loads), APIHeavyUser (active interactions, 30% of users, 2-5s operations). Defined strict performance SLAs: health endpoints p95<100ms p99<200ms, data endpoints p95<500ms p99<1000ms, write endpoints p95<1000ms p99<2000ms, overall error rate <1%. Automated threshold validation via test_stop event handler that logs violations as warnings. Created Makefile with 3 load testing commands: make load-test (interactive web UI at localhost:8089), make load-test-headless (100 users, 10/s spawn rate, 60s duration, generates timestamped CSV/HTML reports in results/load/), make load-test-quick (10 users, 2/s spawn, 30s smoke test). Added locust>=2.42.0 to requirements.txt.
# status = stable

# v96.2.0 - Visual Regression Testing Infrastructure
# description = Minor release adding Playwright-based visual regression testing infrastructure for UI components in light/dark themes.
# changes = Installed Playwright @playwright/test v1.56.1 with Chromium browser for visual regression testing. Created playwright.config.ts configuration with separate test projects for light and dark color schemes. Built 3 comprehensive test suites covering 8 visual regression tests: system-status.spec.ts tests SystemStatus page (full page, navigation bar, health cards), dashboard.spec.ts tests Dashboard (full page, header section), navigation.spec.ts tests Navigation component (appbar, mobile drawer, backend status indicator). Added npm scripts in package.json: test:visual for running tests, test:visual:ui for interactive mode, test:visual:update for updating snapshots. Updated .gitignore to exclude playwright-report/ and test-results/ while preserving snapshot baselines. Infrastructure complete and ready for baseline generation with `npm run test:visual:update`.
# status = stable

# v96.1.8 - In-App TODO List Dashboard
# description = Patch release adding in-app TODO list viewer for real-time development progress tracking.
# changes = Created /api/todo endpoint in api.py that parses docs/TODO.md with regex to extract structured TODO items with checkboxes, priority levels (P0-P3), effort estimates (S/M/L), titles, and descriptions. Built TodoList React component (162 lines) with Material-UI showing color-coded priority chips (P0=red, P1=warning, P2=info, P3=default), completion checkboxes, linear progress bar, and auto-refresh every 30 seconds. Added /todo route in App.tsx with lazy loading and added TODO navigation menu item with ChecklistIcon in Navigation.tsx. Users can now view complete development backlog at localhost:3000/todo without leaving the application, with visual progress tracking showing X/Y tasks completed with percentage.
# status = stable

# v96.1.7 - Backend Startup Status Cross-Process Persistence Fix
# description = Patch release fixing status file being overwritten by uvicorn, completing live backend monitoring.
# changes = Fixed BackendStartupLogger to load and restore existing status from file when uvicorn subprocess starts. When status file exists, logger now loads steps from it and restores them to the new instance instead of overwriting with empty data. This ensures API endpoint /api/backend/startup/status returns the actual startup steps logged by start.py. Backend Status page at localhost:3000/backend now shows live startup progress. Navigation bar "Backend Offline (%)" indicator now displays realistic progress percentage during startup.
# status = stable

# v96.1.6 - Backend Startup Logger Log Preservation Fix
# description = Patch release fixing backend startup log file being truncated by uvicorn subprocess.
# changes = Fixed BackendStartupLogger to preserve logs from parent process (start.py) when uvicorn subprocess starts. Changed log file initialization to check if file exists first - only creates header if file doesn't exist, otherwise appends process start marker. This prevents uvicorn's logger instance from wiping out start.py's startup steps. Now both start.py and API process logs are preserved in ~/.pokertool/logs/backend_startup.log.
# status = stable

# v96.1.5 - Backend Startup Logger Implementation
# description = Patch release adding backend startup progress tracking infrastructure with cross-process file-based state sharing.
# changes = Created BackendStartupLogger module for tracking startup steps across process boundaries. Implemented file-based state persistence using JSON at ~/.pokertool/logs/backend_startup_status.json for cross-process access. Added thread-safe singleton pattern with Lock for concurrent access. Logger supports register_steps(), start_step(), complete_step(), log_step() methods matching start.py expectations. Logs to ~/.pokertool/logs/backend_startup.log for debugging. API endpoints /api/backend/startup/status and /api/backend/startup/log in api.py consume logger data. Provides real-time startup progress for Backend Status page at localhost:3000/backend. Frontend unit tests passing (8/8 tests for Navigation status indicator).
# status = stable

# v96.1.4 - Unified Backend Status Indicator
# description = Patch release consolidating confusing realtime/backend status split into single unified backend indicator.
# changes = Removed confusing "Realtime Offline" status that appeared inconsistently. Consolidated backend and WebSocket status into single "Backend" indicator that shows green when API + WebSocket + health checks all pass, red when any component fails. Simplified status logic: Backend Online (green) when all systems operational, Backend Offline (red) when API or WebSocket down, Backend Degraded (yellow) when health checks fail. Removed all "realtime" terminology from UI and code comments. Added comprehensive unit tests (7 test cases) for status indicator logic. Fixed start.py hanging during dependency installation by adding timeout and capture_output. Users now see clear, unambiguous backend status at all times.
# status = stable

# v96.1.3 - Backend Startup Percentage Indicator
# description = Patch release adding real-time startup progress percentage to navigation bar status indicator.
# changes = Added live percentage indicator to navigation bar backend status showing "Backend Offline (25%)" during startup. Polls /api/backend/startup/status endpoint every 2 seconds for real-time progress updates. Displays steps_completed/total_steps percentage with automatic calculation. Enhanced system status tooltip with detailed startup progress information including pending task counts. Percentage automatically hides when backend comes online or startup completes. Provides immediate visual feedback on backend initialization progress without requiring navigation to Backend Status page.
# status = stable

# v96.1.2 - Backend Status Live Monitoring & Documentation Update
# description = Patch release enhancing Backend Status page with live color-coded task tracking, clickable logo navigation, and comprehensive documentation of monitoring features.
# changes = Enhanced Backend Status page with real-time color-coded task visualization (brown→orange→green transitions). Pre-register all 7 startup steps as 'pending' for immediate visibility. Added status alerts explaining why backend is offline with task counts. Improved task list with colored backgrounds, smooth transitions, and detailed status chips. Made PokerTool Pro logo clickable to navigate back to dashboard with hover effect. Updated backend_startup_logger.py to support pending status and step pre-registration. Enhanced README.md with comprehensive monitoring, error handling, and best practices sections covering Backend Status Dashboard, Frontend Error Monitoring, Webpack Chunk Loading Resilience, production deployment checklist, and development best practices. All changes create professional always-live monitoring experience.
# status = stable

# v96.1.1 - Frontend Error Monitoring & Chunk Loading Fix
# description = Patch release adding comprehensive frontend compile error monitoring with auto-shutdown and fixing webpack chunk loading errors with automatic retry mechanism.
# changes = Created FrontendErrorMonitor class for real-time detection of blocking compile errors (module not found, import errors, syntax errors, compilation failures). Integrated monitoring thread into start.py that automatically logs errors, adds P0 tasks to TODO.md, and gracefully shuts down application. Added automatic chunk loading retry mechanism in public/index.html with exponential backoff (1s, 2s, 3s delays, max 3 retries). Handles both window.onerror and unhandledrejection events for ChunkLoadError. Prevents user-facing errors from transient network/caching issues. Created comprehensive test suite for error monitor (10 tests, all passing). Cleared webpack cache directories. Frontend now gracefully recovers from chunk loading failures without manual intervention.
# status = stable

# v96.0.0 - Reliability & Stability Release
# description = Major release focused on application reliability, stability improvements, and validated startup processes.
# changes = Verified and validated complete startup sequence including dependency installation, backend API initialization, and frontend build processes. Confirmed successful loading of all core modules (logging, scraper, concurrency, health checker, tracing). Enhanced process cleanup for reliable restarts. All systems operational with graceful degradation where optional dependencies (TensorFlow) are unavailable. Production-ready with comprehensive error handling and monitoring.
# status = stable

# v95.0.1 - Complete Documentation Update
# description = Documentation patch release completing comprehensive documentation of all features from v89-v95, including error analysis workflow and full technical details.
# changes = Added comprehensive documentation for v89-v91 releases in FEATURES.md. v91: FastAPI/Uvicorn API infrastructure. v90: OpenTelemetry distributed tracing, structured JSON logging with correlation IDs, ML model lazy loading and caching. v89: UI status consolidation, RBAC security audit, TypeScript strict mode. Added complete error analysis and staged fixing workflow to README documenting Trouble Feed system. All releases from v89 through v95 now have complete feature documentation with technical implementation details.
# status = stable

# v95.0.0 - Dashboard Version Display & Comprehensive Documentation Release
# description = Enhanced dashboard to display current git-tracked version at all times, plus comprehensive documentation of all previously undocumented features from v92-v95.
# changes = Updated Dashboard component to use RELEASE_VERSION constant from config/releaseVersion.ts (auto-synced from VERSION file via scripts/sync-version.js) instead of environment variable for robust version display. Enhanced version chip styling with gradient background and responsive sizing. Created comprehensive documentation in FEATURES.md covering v92.0.0 (Session Management), v93.0.0 (Frontend Compilation Fixes), v94.0.0 (Trouble Feed System), and v95.0.0 (Dashboard Version & Documentation). Documentation includes technical implementation details, file changes, API endpoints, and feature benefits. Dashboard version chip now consistently shows accurate git-tracked version with visual polish.
# status = stable

# v94.0.0 - Trouble Feed System Release
# description = Comprehensive AI-optimized error aggregation and trouble feed system at /logs/trouble_feed.txt that captures all errors and warnings from across the entire application with maximum detail for intelligent debugging and decision-making.
# changes = Created centralized trouble feed handler (trouble_feed.py) with human and AI-readable formatting including full stack traces, context preservation, and severity classification. Integrated automatic backend error capture through master_logging system. Added frontend error tracking service (troubleFeed.ts) with automatic global error handler and unhandled rejection capture. Implemented API endpoint (/api/errors/frontend) for frontend error reporting with rate limiting. Features include automatic log rotation at 50MB, real-time error streaming, in-memory caching of recent entries, deduplication, and multi-source aggregation (Backend, Frontend, WebSocket, Scraper, Database, Build). Each trouble entry includes timestamp, severity, source, module location, error type/message, full stack trace, context data, system state, and AI suggestion hints. Trouble feed automatically captures warnings/errors from all logging handlers across the application.
# status = stable

[components]
# Scraping System Components - v75.0.0 Implementation

[components.roi_tracking]
version = 1.0.0
features = SCRAPE-015
description = ROI change detection with perceptual hashing
last_updated = 2025-10-15
status = active

[components.frame_differencing]
version = 1.0.0
features = SCRAPE-016
description = Frame similarity detection using SSIM
last_updated = 2025-10-15
status = active

[components.smart_ocr_cache]
version = 1.0.0
features = SCRAPE-017
description = Smart OCR cache with hash-based invalidation
last_updated = 2025-10-15
status = active

[components.speed_optimizer]
version = 1.0.0
features = SCRAPE-018, SCRAPE-019, SCRAPE-020, SCRAPE-021, SCRAPE-022, SCRAPE-023, SCRAPE-024, SCRAPE-025, SCRAPE-026
description = Speed optimizations including parallel processing, priority queues, and resource pooling
last_updated = 2025-10-15
status = active
feature_count = 9

[components.accuracy_system]
version = 1.0.0
features = SCRAPE-027, SCRAPE-028, SCRAPE-029, SCRAPE-030, SCRAPE-031, SCRAPE-032, SCRAPE-033, SCRAPE-034, SCRAPE-035, SCRAPE-036, SCRAPE-037, SCRAPE-038, SCRAPE-039
description = Accuracy improvements including temporal consensus, state validation, and confidence scoring
last_updated = 2025-10-15
status = active
feature_count = 13

[components.reliability_system]
version = 1.0.0
features = SCRAPE-040, SCRAPE-041, SCRAPE-042, SCRAPE-043, SCRAPE-044, SCRAPE-045, SCRAPE-046, SCRAPE-047, SCRAPE-048, SCRAPE-049
description = Reliability enhancements including health monitoring, graceful degradation, and automatic recovery
last_updated = 2025-10-15
status = active
feature_count = 10

[components.master_integration]
version = 1.0.0
features = All above components
description = Unified API integrating all scraping subsystems
last_updated = 2025-10-15
status = active
dependencies = roi_tracking, frame_differencing, smart_ocr_cache, speed_optimizer, accuracy_system, reliability_system

# Frontend Web Components - v76.0.0 Implementation

[components.websocket_reconnection]
version = 1.0.0
features = WEB-TECH-001
description = Robust WebSocket with exponential backoff, heartbeat, and message caching
last_updated = 2025-10-15
status = active

[components.advice_panel]
version = 1.0.0
features = WEB-ADVICE-001
description = Real-time advice panel with confidence visualization and throttled updates
last_updated = 2025-10-15
status = active

[components.alternative_actions]
version = 1.0.0
features = WEB-ADVICE-002
description = Alternative actions suggester with EV comparison and viability scoring
last_updated = 2025-10-15
status = active

[components.connection_status]
version = 1.0.0
features = Supporting component for WEB-TECH-001
description = Connection status indicator with reconnect controls
last_updated = 2025-10-15
status = active

[components.error_boundary]
version = 1.0.0
features = WEB-TECH-005
description = Error boundary with automatic recovery and degraded mode
last_updated = 2025-10-15
status = active

# Frontend State Management - v78.0.0 Implementation

[components.redux_store]
version = 1.0.0
features = WEB-TECH-002
description = Redux Toolkit state management with TypeScript and localStorage persistence
last_updated = 2025-10-15
status = active

[components.game_slice]
version = 1.0.0
features = WEB-TECH-002
description = Game state slice (table, players, cards, pot management)
last_updated = 2025-10-15
status = active

[components.advice_slice]
version = 1.0.0
features = WEB-TECH-002
description = Advice state slice with history tracking and caching
last_updated = 2025-10-15
status = active

[components.session_slice]
version = 1.0.0
features = WEB-TECH-002
description = Session tracking slice with advanced statistics
last_updated = 2025-10-15
status = active

[components.settings_slice]
version = 1.0.0
features = WEB-TECH-002
description = User settings and preferences slice
last_updated = 2025-10-15
status = active

# Mobile Responsive UI - v78.0.0 Implementation

[components.mobile_layout]
version = 1.0.0
features = WEB-UX-001
description = Responsive mobile CSS with 5 breakpoints and touch-friendly controls
last_updated = 2025-10-15
status = active

[components.mobile_bottom_nav]
version = 1.0.0
features = WEB-UX-001
description = Bottom navigation bar for mobile devices
last_updated = 2025-10-15
status = active

[components.swipe_gesture]
version = 1.0.0
features = WEB-UX-001
description = Touch swipe gesture detection hook
last_updated = 2025-10-15
status = active

# Bet Sizing & Hand Analysis - v79.0.0 Implementation

[components.bet_sizing_wizard]
version = 1.0.0
features = WEB-ADVICE-005
description = Interactive bet sizing with presets, slider, and optimal zone visualization
last_updated = 2025-10-15
status = active

[components.hand_strength_visualizer]
version = 1.0.0
features = WEB-ADVICE-006
description = Hand strength visualizer with equity bars, outs tracking, and percentile ranking
last_updated = 2025-10-15
status = active

# Smart Advice Integration - v80.0.0 Implementation

[components.table_view_advice]
version = 1.0.0
features = WEB-ADVICE-007
description = Integrated AdvicePanel into TableView with real-time WebSocket updates
last_updated = 2025-10-15
status = active

[components.frontend_cleanup]
version = 1.0.0
features = STARTUP-003
description = Enhanced startup script to cleanup React dev servers before launch
last_updated = 2025-10-15
status = active

# Tkinter Removal - v83.0.0 Implementation

[components.web_only_architecture]
version = 1.0.0
features = ARCH-001
description = Completed removal of all tkinter/GUI dependencies, web-only architecture
last_updated = 2025-10-15
status = active

# Detection WebSocket System - v85.0.0 Implementation

[components.detection_websocket]
version = 1.0.0
features = WS-DETECT-001
description = Real-time detection event broadcasting via WebSocket with connection management
last_updated = 2025-10-16
status = active

[tracking]
# Version tracking metadata
total_features_implemented = 54
total_components = 26
last_regression_check = 2025-10-16
last_feature_audit = 2025-10-16
web_features_implemented = 13

# Component Version Guidelines:
# - Increment patch (x.y.Z) for bug fixes and minor improvements
# - Increment minor (x.Y.0) for new features within the component
# - Increment major (X.0.0) for breaking changes or major rewrites
# - Update last_updated date whenever component version changes
# - Set status to 'deprecated' if component is being phased out
# - Set status to 'inactive' if component is temporarily disabled
