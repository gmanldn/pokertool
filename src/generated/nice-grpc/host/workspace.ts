// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.19.1
// source: host/workspace.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { FileDiagnostics, Metadata } from "../cline/common";

export interface GetWorkspacePathsRequest {
  /**
   * The unique ID for the workspace/project.
   * This is currently optional in vscode. It is required in other environments where cline is running at
   * the application level, and the user can open multiple projects.
   */
  id?: string | undefined;
}

export interface GetWorkspacePathsResponse {
  /** The unique ID for the workspace/project. */
  id?: string | undefined;
  paths: string[];
}

export interface SaveOpenDocumentIfDirtyRequest {
  filePath?: string | undefined;
}

export interface SaveOpenDocumentIfDirtyResponse {
  /** Returns true if the document was saved. */
  wasSaved?: boolean | undefined;
}

export interface GetDiagnosticsRequest {
  metadata?: Metadata | undefined;
}

export interface GetDiagnosticsResponse {
  fileDiagnostics: FileDiagnostics[];
}

/** Request for host-side workspace search (files/folders) used by mentions autocomplete */
export interface SearchWorkspaceItemsRequest {
  /** Search query string */
  query: string;
  /** Optional limit for results (default decided by host) */
  limit?: number | undefined;
  selectedType?: SearchWorkspaceItemsRequest_SearchItemType | undefined;
}

/** Optional selected type filter */
export enum SearchWorkspaceItemsRequest_SearchItemType {
  FILE = 0,
  FOLDER = 1,
  UNRECOGNIZED = -1,
}

export function searchWorkspaceItemsRequest_SearchItemTypeFromJSON(
  object: any,
): SearchWorkspaceItemsRequest_SearchItemType {
  switch (object) {
    case 0:
    case "FILE":
      return SearchWorkspaceItemsRequest_SearchItemType.FILE;
    case 1:
    case "FOLDER":
      return SearchWorkspaceItemsRequest_SearchItemType.FOLDER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SearchWorkspaceItemsRequest_SearchItemType.UNRECOGNIZED;
  }
}

export function searchWorkspaceItemsRequest_SearchItemTypeToJSON(
  object: SearchWorkspaceItemsRequest_SearchItemType,
): string {
  switch (object) {
    case SearchWorkspaceItemsRequest_SearchItemType.FILE:
      return "FILE";
    case SearchWorkspaceItemsRequest_SearchItemType.FOLDER:
      return "FOLDER";
    case SearchWorkspaceItemsRequest_SearchItemType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Response for host-side workspace search */
export interface SearchWorkspaceItemsResponse {
  items: SearchWorkspaceItemsResponse_SearchItem[];
}

export interface SearchWorkspaceItemsResponse_SearchItem {
  /** Workspace-relative path using platform separators */
  path: string;
  type: SearchWorkspaceItemsRequest_SearchItemType;
  /** Optional display label (e.g., basename) */
  label?: string | undefined;
}

export interface OpenProblemsPanelRequest {
}

export interface OpenProblemsPanelResponse {
}

export interface OpenInFileExplorerPanelRequest {
  path: string;
}

export interface OpenInFileExplorerPanelResponse {
}

/** Request/response for opening the Cline sidebar */
export interface OpenClineSidebarPanelRequest {
}

export interface OpenClineSidebarPanelResponse {
}

function createBaseGetWorkspacePathsRequest(): GetWorkspacePathsRequest {
  return { id: undefined };
}

export const GetWorkspacePathsRequest: MessageFns<GetWorkspacePathsRequest> = {
  encode(message: GetWorkspacePathsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWorkspacePathsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWorkspacePathsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWorkspacePathsRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : undefined };
  },

  toJSON(message: GetWorkspacePathsRequest): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<GetWorkspacePathsRequest>): GetWorkspacePathsRequest {
    return GetWorkspacePathsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetWorkspacePathsRequest>): GetWorkspacePathsRequest {
    const message = createBaseGetWorkspacePathsRequest();
    message.id = object.id ?? undefined;
    return message;
  },
};

function createBaseGetWorkspacePathsResponse(): GetWorkspacePathsResponse {
  return { id: undefined, paths: [] };
}

export const GetWorkspacePathsResponse: MessageFns<GetWorkspacePathsResponse> = {
  encode(message: GetWorkspacePathsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    for (const v of message.paths) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWorkspacePathsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWorkspacePathsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.paths.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWorkspacePathsResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      paths: globalThis.Array.isArray(object?.paths) ? object.paths.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: GetWorkspacePathsResponse): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.paths?.length) {
      obj.paths = message.paths;
    }
    return obj;
  },

  create(base?: DeepPartial<GetWorkspacePathsResponse>): GetWorkspacePathsResponse {
    return GetWorkspacePathsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetWorkspacePathsResponse>): GetWorkspacePathsResponse {
    const message = createBaseGetWorkspacePathsResponse();
    message.id = object.id ?? undefined;
    message.paths = object.paths?.map((e) => e) || [];
    return message;
  },
};

function createBaseSaveOpenDocumentIfDirtyRequest(): SaveOpenDocumentIfDirtyRequest {
  return { filePath: undefined };
}

export const SaveOpenDocumentIfDirtyRequest: MessageFns<SaveOpenDocumentIfDirtyRequest> = {
  encode(message: SaveOpenDocumentIfDirtyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filePath !== undefined) {
      writer.uint32(18).string(message.filePath);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SaveOpenDocumentIfDirtyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSaveOpenDocumentIfDirtyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.filePath = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SaveOpenDocumentIfDirtyRequest {
    return { filePath: isSet(object.filePath) ? globalThis.String(object.filePath) : undefined };
  },

  toJSON(message: SaveOpenDocumentIfDirtyRequest): unknown {
    const obj: any = {};
    if (message.filePath !== undefined) {
      obj.filePath = message.filePath;
    }
    return obj;
  },

  create(base?: DeepPartial<SaveOpenDocumentIfDirtyRequest>): SaveOpenDocumentIfDirtyRequest {
    return SaveOpenDocumentIfDirtyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SaveOpenDocumentIfDirtyRequest>): SaveOpenDocumentIfDirtyRequest {
    const message = createBaseSaveOpenDocumentIfDirtyRequest();
    message.filePath = object.filePath ?? undefined;
    return message;
  },
};

function createBaseSaveOpenDocumentIfDirtyResponse(): SaveOpenDocumentIfDirtyResponse {
  return { wasSaved: undefined };
}

export const SaveOpenDocumentIfDirtyResponse: MessageFns<SaveOpenDocumentIfDirtyResponse> = {
  encode(message: SaveOpenDocumentIfDirtyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.wasSaved !== undefined) {
      writer.uint32(8).bool(message.wasSaved);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SaveOpenDocumentIfDirtyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSaveOpenDocumentIfDirtyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.wasSaved = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SaveOpenDocumentIfDirtyResponse {
    return { wasSaved: isSet(object.wasSaved) ? globalThis.Boolean(object.wasSaved) : undefined };
  },

  toJSON(message: SaveOpenDocumentIfDirtyResponse): unknown {
    const obj: any = {};
    if (message.wasSaved !== undefined) {
      obj.wasSaved = message.wasSaved;
    }
    return obj;
  },

  create(base?: DeepPartial<SaveOpenDocumentIfDirtyResponse>): SaveOpenDocumentIfDirtyResponse {
    return SaveOpenDocumentIfDirtyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SaveOpenDocumentIfDirtyResponse>): SaveOpenDocumentIfDirtyResponse {
    const message = createBaseSaveOpenDocumentIfDirtyResponse();
    message.wasSaved = object.wasSaved ?? undefined;
    return message;
  },
};

function createBaseGetDiagnosticsRequest(): GetDiagnosticsRequest {
  return { metadata: undefined };
}

export const GetDiagnosticsRequest: MessageFns<GetDiagnosticsRequest> = {
  encode(message: GetDiagnosticsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDiagnosticsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDiagnosticsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDiagnosticsRequest {
    return { metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined };
  },

  toJSON(message: GetDiagnosticsRequest): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create(base?: DeepPartial<GetDiagnosticsRequest>): GetDiagnosticsRequest {
    return GetDiagnosticsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDiagnosticsRequest>): GetDiagnosticsRequest {
    const message = createBaseGetDiagnosticsRequest();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseGetDiagnosticsResponse(): GetDiagnosticsResponse {
  return { fileDiagnostics: [] };
}

export const GetDiagnosticsResponse: MessageFns<GetDiagnosticsResponse> = {
  encode(message: GetDiagnosticsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.fileDiagnostics) {
      FileDiagnostics.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDiagnosticsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDiagnosticsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fileDiagnostics.push(FileDiagnostics.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDiagnosticsResponse {
    return {
      fileDiagnostics: globalThis.Array.isArray(object?.fileDiagnostics)
        ? object.fileDiagnostics.map((e: any) => FileDiagnostics.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetDiagnosticsResponse): unknown {
    const obj: any = {};
    if (message.fileDiagnostics?.length) {
      obj.fileDiagnostics = message.fileDiagnostics.map((e) => FileDiagnostics.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetDiagnosticsResponse>): GetDiagnosticsResponse {
    return GetDiagnosticsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDiagnosticsResponse>): GetDiagnosticsResponse {
    const message = createBaseGetDiagnosticsResponse();
    message.fileDiagnostics = object.fileDiagnostics?.map((e) => FileDiagnostics.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSearchWorkspaceItemsRequest(): SearchWorkspaceItemsRequest {
  return { query: "", limit: undefined, selectedType: undefined };
}

export const SearchWorkspaceItemsRequest: MessageFns<SearchWorkspaceItemsRequest> = {
  encode(message: SearchWorkspaceItemsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== "") {
      writer.uint32(10).string(message.query);
    }
    if (message.limit !== undefined) {
      writer.uint32(16).int32(message.limit);
    }
    if (message.selectedType !== undefined) {
      writer.uint32(24).int32(message.selectedType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchWorkspaceItemsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchWorkspaceItemsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.query = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.selectedType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchWorkspaceItemsRequest {
    return {
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : undefined,
      selectedType: isSet(object.selectedType)
        ? searchWorkspaceItemsRequest_SearchItemTypeFromJSON(object.selectedType)
        : undefined,
    };
  },

  toJSON(message: SearchWorkspaceItemsRequest): unknown {
    const obj: any = {};
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.limit !== undefined) {
      obj.limit = Math.round(message.limit);
    }
    if (message.selectedType !== undefined) {
      obj.selectedType = searchWorkspaceItemsRequest_SearchItemTypeToJSON(message.selectedType);
    }
    return obj;
  },

  create(base?: DeepPartial<SearchWorkspaceItemsRequest>): SearchWorkspaceItemsRequest {
    return SearchWorkspaceItemsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchWorkspaceItemsRequest>): SearchWorkspaceItemsRequest {
    const message = createBaseSearchWorkspaceItemsRequest();
    message.query = object.query ?? "";
    message.limit = object.limit ?? undefined;
    message.selectedType = object.selectedType ?? undefined;
    return message;
  },
};

function createBaseSearchWorkspaceItemsResponse(): SearchWorkspaceItemsResponse {
  return { items: [] };
}

export const SearchWorkspaceItemsResponse: MessageFns<SearchWorkspaceItemsResponse> = {
  encode(message: SearchWorkspaceItemsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.items) {
      SearchWorkspaceItemsResponse_SearchItem.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchWorkspaceItemsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchWorkspaceItemsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.items.push(SearchWorkspaceItemsResponse_SearchItem.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchWorkspaceItemsResponse {
    return {
      items: globalThis.Array.isArray(object?.items)
        ? object.items.map((e: any) => SearchWorkspaceItemsResponse_SearchItem.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SearchWorkspaceItemsResponse): unknown {
    const obj: any = {};
    if (message.items?.length) {
      obj.items = message.items.map((e) => SearchWorkspaceItemsResponse_SearchItem.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SearchWorkspaceItemsResponse>): SearchWorkspaceItemsResponse {
    return SearchWorkspaceItemsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchWorkspaceItemsResponse>): SearchWorkspaceItemsResponse {
    const message = createBaseSearchWorkspaceItemsResponse();
    message.items = object.items?.map((e) => SearchWorkspaceItemsResponse_SearchItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSearchWorkspaceItemsResponse_SearchItem(): SearchWorkspaceItemsResponse_SearchItem {
  return { path: "", type: 0, label: undefined };
}

export const SearchWorkspaceItemsResponse_SearchItem: MessageFns<SearchWorkspaceItemsResponse_SearchItem> = {
  encode(message: SearchWorkspaceItemsResponse_SearchItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.label !== undefined) {
      writer.uint32(26).string(message.label);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchWorkspaceItemsResponse_SearchItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchWorkspaceItemsResponse_SearchItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.label = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchWorkspaceItemsResponse_SearchItem {
    return {
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      type: isSet(object.type) ? searchWorkspaceItemsRequest_SearchItemTypeFromJSON(object.type) : 0,
      label: isSet(object.label) ? globalThis.String(object.label) : undefined,
    };
  },

  toJSON(message: SearchWorkspaceItemsResponse_SearchItem): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.type !== 0) {
      obj.type = searchWorkspaceItemsRequest_SearchItemTypeToJSON(message.type);
    }
    if (message.label !== undefined) {
      obj.label = message.label;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchWorkspaceItemsResponse_SearchItem>): SearchWorkspaceItemsResponse_SearchItem {
    return SearchWorkspaceItemsResponse_SearchItem.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchWorkspaceItemsResponse_SearchItem>): SearchWorkspaceItemsResponse_SearchItem {
    const message = createBaseSearchWorkspaceItemsResponse_SearchItem();
    message.path = object.path ?? "";
    message.type = object.type ?? 0;
    message.label = object.label ?? undefined;
    return message;
  },
};

function createBaseOpenProblemsPanelRequest(): OpenProblemsPanelRequest {
  return {};
}

export const OpenProblemsPanelRequest: MessageFns<OpenProblemsPanelRequest> = {
  encode(_: OpenProblemsPanelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OpenProblemsPanelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpenProblemsPanelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): OpenProblemsPanelRequest {
    return {};
  },

  toJSON(_: OpenProblemsPanelRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<OpenProblemsPanelRequest>): OpenProblemsPanelRequest {
    return OpenProblemsPanelRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<OpenProblemsPanelRequest>): OpenProblemsPanelRequest {
    const message = createBaseOpenProblemsPanelRequest();
    return message;
  },
};

function createBaseOpenProblemsPanelResponse(): OpenProblemsPanelResponse {
  return {};
}

export const OpenProblemsPanelResponse: MessageFns<OpenProblemsPanelResponse> = {
  encode(_: OpenProblemsPanelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OpenProblemsPanelResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpenProblemsPanelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): OpenProblemsPanelResponse {
    return {};
  },

  toJSON(_: OpenProblemsPanelResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<OpenProblemsPanelResponse>): OpenProblemsPanelResponse {
    return OpenProblemsPanelResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<OpenProblemsPanelResponse>): OpenProblemsPanelResponse {
    const message = createBaseOpenProblemsPanelResponse();
    return message;
  },
};

function createBaseOpenInFileExplorerPanelRequest(): OpenInFileExplorerPanelRequest {
  return { path: "" };
}

export const OpenInFileExplorerPanelRequest: MessageFns<OpenInFileExplorerPanelRequest> = {
  encode(message: OpenInFileExplorerPanelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OpenInFileExplorerPanelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpenInFileExplorerPanelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OpenInFileExplorerPanelRequest {
    return { path: isSet(object.path) ? globalThis.String(object.path) : "" };
  },

  toJSON(message: OpenInFileExplorerPanelRequest): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    return obj;
  },

  create(base?: DeepPartial<OpenInFileExplorerPanelRequest>): OpenInFileExplorerPanelRequest {
    return OpenInFileExplorerPanelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OpenInFileExplorerPanelRequest>): OpenInFileExplorerPanelRequest {
    const message = createBaseOpenInFileExplorerPanelRequest();
    message.path = object.path ?? "";
    return message;
  },
};

function createBaseOpenInFileExplorerPanelResponse(): OpenInFileExplorerPanelResponse {
  return {};
}

export const OpenInFileExplorerPanelResponse: MessageFns<OpenInFileExplorerPanelResponse> = {
  encode(_: OpenInFileExplorerPanelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OpenInFileExplorerPanelResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpenInFileExplorerPanelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): OpenInFileExplorerPanelResponse {
    return {};
  },

  toJSON(_: OpenInFileExplorerPanelResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<OpenInFileExplorerPanelResponse>): OpenInFileExplorerPanelResponse {
    return OpenInFileExplorerPanelResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<OpenInFileExplorerPanelResponse>): OpenInFileExplorerPanelResponse {
    const message = createBaseOpenInFileExplorerPanelResponse();
    return message;
  },
};

function createBaseOpenClineSidebarPanelRequest(): OpenClineSidebarPanelRequest {
  return {};
}

export const OpenClineSidebarPanelRequest: MessageFns<OpenClineSidebarPanelRequest> = {
  encode(_: OpenClineSidebarPanelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OpenClineSidebarPanelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpenClineSidebarPanelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): OpenClineSidebarPanelRequest {
    return {};
  },

  toJSON(_: OpenClineSidebarPanelRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<OpenClineSidebarPanelRequest>): OpenClineSidebarPanelRequest {
    return OpenClineSidebarPanelRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<OpenClineSidebarPanelRequest>): OpenClineSidebarPanelRequest {
    const message = createBaseOpenClineSidebarPanelRequest();
    return message;
  },
};

function createBaseOpenClineSidebarPanelResponse(): OpenClineSidebarPanelResponse {
  return {};
}

export const OpenClineSidebarPanelResponse: MessageFns<OpenClineSidebarPanelResponse> = {
  encode(_: OpenClineSidebarPanelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OpenClineSidebarPanelResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpenClineSidebarPanelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): OpenClineSidebarPanelResponse {
    return {};
  },

  toJSON(_: OpenClineSidebarPanelResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<OpenClineSidebarPanelResponse>): OpenClineSidebarPanelResponse {
    return OpenClineSidebarPanelResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<OpenClineSidebarPanelResponse>): OpenClineSidebarPanelResponse {
    const message = createBaseOpenClineSidebarPanelResponse();
    return message;
  },
};

/** Provides methods for working with workspaces/projects. */
export type WorkspaceServiceDefinition = typeof WorkspaceServiceDefinition;
export const WorkspaceServiceDefinition = {
  name: "WorkspaceService",
  fullName: "host.WorkspaceService",
  methods: {
    /** Returns a list of the top level directories of the workspace. */
    getWorkspacePaths: {
      name: "getWorkspacePaths",
      requestType: GetWorkspacePathsRequest,
      requestStream: false,
      responseType: GetWorkspacePathsResponse,
      responseStream: false,
      options: {},
    },
    /**
     * Saves an open document if it's open in the editor and has unsaved changes.
     * Returns true if the document was saved, returns false if the document was not found, or did not
     * need to be saved.
     */
    saveOpenDocumentIfDirty: {
      name: "saveOpenDocumentIfDirty",
      requestType: SaveOpenDocumentIfDirtyRequest,
      requestStream: false,
      responseType: SaveOpenDocumentIfDirtyResponse,
      responseStream: false,
      options: {},
    },
    /** Get diagnostics from the workspace. */
    getDiagnostics: {
      name: "getDiagnostics",
      requestType: GetDiagnosticsRequest,
      requestStream: false,
      responseType: GetDiagnosticsResponse,
      responseStream: false,
      options: {},
    },
    /** Makes the problems panel/pane visible in the IDE and focuses it. */
    openProblemsPanel: {
      name: "openProblemsPanel",
      requestType: OpenProblemsPanelRequest,
      requestStream: false,
      responseType: OpenProblemsPanelResponse,
      responseStream: false,
      options: {},
    },
    /** Opens the IDE file explorer panel and selects a file or directory. */
    openInFileExplorerPanel: {
      name: "openInFileExplorerPanel",
      requestType: OpenInFileExplorerPanelRequest,
      requestStream: false,
      responseType: OpenInFileExplorerPanelResponse,
      responseStream: false,
      options: {},
    },
    /** Opens and focuses the Cline sidebar panel in the host IDE. */
    openClineSidebarPanel: {
      name: "openClineSidebarPanel",
      requestType: OpenClineSidebarPanelRequest,
      requestStream: false,
      responseType: OpenClineSidebarPanelResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface WorkspaceServiceImplementation<CallContextExt = {}> {
  /** Returns a list of the top level directories of the workspace. */
  getWorkspacePaths(
    request: GetWorkspacePathsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetWorkspacePathsResponse>>;
  /**
   * Saves an open document if it's open in the editor and has unsaved changes.
   * Returns true if the document was saved, returns false if the document was not found, or did not
   * need to be saved.
   */
  saveOpenDocumentIfDirty(
    request: SaveOpenDocumentIfDirtyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SaveOpenDocumentIfDirtyResponse>>;
  /** Get diagnostics from the workspace. */
  getDiagnostics(
    request: GetDiagnosticsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDiagnosticsResponse>>;
  /** Makes the problems panel/pane visible in the IDE and focuses it. */
  openProblemsPanel(
    request: OpenProblemsPanelRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<OpenProblemsPanelResponse>>;
  /** Opens the IDE file explorer panel and selects a file or directory. */
  openInFileExplorerPanel(
    request: OpenInFileExplorerPanelRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<OpenInFileExplorerPanelResponse>>;
  /** Opens and focuses the Cline sidebar panel in the host IDE. */
  openClineSidebarPanel(
    request: OpenClineSidebarPanelRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<OpenClineSidebarPanelResponse>>;
}

export interface WorkspaceServiceClient<CallOptionsExt = {}> {
  /** Returns a list of the top level directories of the workspace. */
  getWorkspacePaths(
    request: DeepPartial<GetWorkspacePathsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetWorkspacePathsResponse>;
  /**
   * Saves an open document if it's open in the editor and has unsaved changes.
   * Returns true if the document was saved, returns false if the document was not found, or did not
   * need to be saved.
   */
  saveOpenDocumentIfDirty(
    request: DeepPartial<SaveOpenDocumentIfDirtyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SaveOpenDocumentIfDirtyResponse>;
  /** Get diagnostics from the workspace. */
  getDiagnostics(
    request: DeepPartial<GetDiagnosticsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDiagnosticsResponse>;
  /** Makes the problems panel/pane visible in the IDE and focuses it. */
  openProblemsPanel(
    request: DeepPartial<OpenProblemsPanelRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<OpenProblemsPanelResponse>;
  /** Opens the IDE file explorer panel and selects a file or directory. */
  openInFileExplorerPanel(
    request: DeepPartial<OpenInFileExplorerPanelRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<OpenInFileExplorerPanelResponse>;
  /** Opens and focuses the Cline sidebar panel in the host IDE. */
  openClineSidebarPanel(
    request: DeepPartial<OpenClineSidebarPanelRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<OpenClineSidebarPanelResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
