// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.19.1
// source: host/env.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientReadableStream,
  type ClientUnaryCall,
  type handleServerStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Empty, EmptyRequest, String, StringRequest } from "../cline/common";

export enum Setting {
  /** UNSUPPORTED - This host does not support this setting. */
  UNSUPPORTED = 0,
  ENABLED = 1,
  DISABLED = 2,
  UNRECOGNIZED = -1,
}

export function settingFromJSON(object: any): Setting {
  switch (object) {
    case 0:
    case "UNSUPPORTED":
      return Setting.UNSUPPORTED;
    case 1:
    case "ENABLED":
      return Setting.ENABLED;
    case 2:
    case "DISABLED":
      return Setting.DISABLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Setting.UNRECOGNIZED;
  }
}

export function settingToJSON(object: Setting): string {
  switch (object) {
    case Setting.UNSUPPORTED:
      return "UNSUPPORTED";
    case Setting.ENABLED:
      return "ENABLED";
    case Setting.DISABLED:
      return "DISABLED";
    case Setting.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface GetHostVersionResponse {
  /** The name of the host platform, e.g VSCode */
  platform?:
    | string
    | undefined;
  /** The version of the host platform, e.g. 1.103.0 */
  version?: string | undefined;
}

export interface GetTelemetrySettingsResponse {
  isEnabled: Setting;
}

export interface TelemetrySettingsEvent {
  isEnabled: Setting;
}

function createBaseGetHostVersionResponse(): GetHostVersionResponse {
  return { platform: undefined, version: undefined };
}

export const GetHostVersionResponse: MessageFns<GetHostVersionResponse> = {
  encode(message: GetHostVersionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.platform !== undefined) {
      writer.uint32(10).string(message.platform);
    }
    if (message.version !== undefined) {
      writer.uint32(18).string(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetHostVersionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHostVersionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.platform = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetHostVersionResponse {
    return {
      platform: isSet(object.platform) ? globalThis.String(object.platform) : undefined,
      version: isSet(object.version) ? globalThis.String(object.version) : undefined,
    };
  },

  toJSON(message: GetHostVersionResponse): unknown {
    const obj: any = {};
    if (message.platform !== undefined) {
      obj.platform = message.platform;
    }
    if (message.version !== undefined) {
      obj.version = message.version;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetHostVersionResponse>, I>>(base?: I): GetHostVersionResponse {
    return GetHostVersionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetHostVersionResponse>, I>>(object: I): GetHostVersionResponse {
    const message = createBaseGetHostVersionResponse();
    message.platform = object.platform ?? undefined;
    message.version = object.version ?? undefined;
    return message;
  },
};

function createBaseGetTelemetrySettingsResponse(): GetTelemetrySettingsResponse {
  return { isEnabled: 0 };
}

export const GetTelemetrySettingsResponse: MessageFns<GetTelemetrySettingsResponse> = {
  encode(message: GetTelemetrySettingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isEnabled !== 0) {
      writer.uint32(8).int32(message.isEnabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTelemetrySettingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTelemetrySettingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isEnabled = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTelemetrySettingsResponse {
    return { isEnabled: isSet(object.isEnabled) ? settingFromJSON(object.isEnabled) : 0 };
  },

  toJSON(message: GetTelemetrySettingsResponse): unknown {
    const obj: any = {};
    if (message.isEnabled !== 0) {
      obj.isEnabled = settingToJSON(message.isEnabled);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTelemetrySettingsResponse>, I>>(base?: I): GetTelemetrySettingsResponse {
    return GetTelemetrySettingsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTelemetrySettingsResponse>, I>>(object: I): GetTelemetrySettingsResponse {
    const message = createBaseGetTelemetrySettingsResponse();
    message.isEnabled = object.isEnabled ?? 0;
    return message;
  },
};

function createBaseTelemetrySettingsEvent(): TelemetrySettingsEvent {
  return { isEnabled: 0 };
}

export const TelemetrySettingsEvent: MessageFns<TelemetrySettingsEvent> = {
  encode(message: TelemetrySettingsEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isEnabled !== 0) {
      writer.uint32(8).int32(message.isEnabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TelemetrySettingsEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTelemetrySettingsEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isEnabled = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TelemetrySettingsEvent {
    return { isEnabled: isSet(object.isEnabled) ? settingFromJSON(object.isEnabled) : 0 };
  },

  toJSON(message: TelemetrySettingsEvent): unknown {
    const obj: any = {};
    if (message.isEnabled !== 0) {
      obj.isEnabled = settingToJSON(message.isEnabled);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TelemetrySettingsEvent>, I>>(base?: I): TelemetrySettingsEvent {
    return TelemetrySettingsEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TelemetrySettingsEvent>, I>>(object: I): TelemetrySettingsEvent {
    const message = createBaseTelemetrySettingsEvent();
    message.isEnabled = object.isEnabled ?? 0;
    return message;
  },
};

/** Provides methods for working with the user's environment. */
export type EnvServiceDefinition = typeof EnvServiceDefinition;
export const EnvServiceDefinition = {
  name: "EnvService",
  fullName: "host.EnvService",
  methods: {
    /** Writes text to the system clipboard. */
    clipboardWriteText: {
      name: "clipboardWriteText",
      requestType: StringRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    /** Reads text from the system clipboard. */
    clipboardReadText: {
      name: "clipboardReadText",
      requestType: EmptyRequest,
      requestStream: false,
      responseType: String,
      responseStream: false,
      options: {},
    },
    /** Returns a stable machine identifier for telemetry distinctId purposes. */
    getMachineId: {
      name: "getMachineId",
      requestType: EmptyRequest,
      requestStream: false,
      responseType: String,
      responseStream: false,
      options: {},
    },
    /** Returns the name and version of the host IDE or environment. */
    getHostVersion: {
      name: "getHostVersion",
      requestType: EmptyRequest,
      requestStream: false,
      responseType: GetHostVersionResponse,
      responseStream: false,
      options: {},
    },
    /**
     * Returns a URI that will redirect to the host environment.
     * e.g. vscode://saoudrizwan.claude-dev, idea://, pycharm://, etc.
     * If the host does not support URIs it should return empty.
     */
    getIdeRedirectUri: {
      name: "getIdeRedirectUri",
      requestType: EmptyRequest,
      requestStream: false,
      responseType: String,
      responseStream: false,
      options: {},
    },
    /**
     * Returns the telemetry settings of the host environment. This may return UNSUPPORTED
     * if the host does not specify telemetry settings for the plugin.
     */
    getTelemetrySettings: {
      name: "getTelemetrySettings",
      requestType: EmptyRequest,
      requestStream: false,
      responseType: GetTelemetrySettingsResponse,
      responseStream: false,
      options: {},
    },
    /** Returns events when the telemetry settings change. */
    subscribeToTelemetrySettings: {
      name: "subscribeToTelemetrySettings",
      requestType: EmptyRequest,
      requestStream: false,
      responseType: TelemetrySettingsEvent,
      responseStream: true,
      options: {},
    },
  },
} as const;

/** Provides methods for working with the user's environment. */
export type EnvServiceService = typeof EnvServiceService;
export const EnvServiceService = {
  /** Writes text to the system clipboard. */
  clipboardWriteText: {
    path: "/host.EnvService/clipboardWriteText",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: StringRequest) => Buffer.from(StringRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => StringRequest.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
  /** Reads text from the system clipboard. */
  clipboardReadText: {
    path: "/host.EnvService/clipboardReadText",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EmptyRequest) => Buffer.from(EmptyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => EmptyRequest.decode(value),
    responseSerialize: (value: String) => Buffer.from(String.encode(value).finish()),
    responseDeserialize: (value: Buffer) => String.decode(value),
  },
  /** Returns a stable machine identifier for telemetry distinctId purposes. */
  getMachineId: {
    path: "/host.EnvService/getMachineId",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EmptyRequest) => Buffer.from(EmptyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => EmptyRequest.decode(value),
    responseSerialize: (value: String) => Buffer.from(String.encode(value).finish()),
    responseDeserialize: (value: Buffer) => String.decode(value),
  },
  /** Returns the name and version of the host IDE or environment. */
  getHostVersion: {
    path: "/host.EnvService/getHostVersion",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EmptyRequest) => Buffer.from(EmptyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => EmptyRequest.decode(value),
    responseSerialize: (value: GetHostVersionResponse) => Buffer.from(GetHostVersionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetHostVersionResponse.decode(value),
  },
  /**
   * Returns a URI that will redirect to the host environment.
   * e.g. vscode://saoudrizwan.claude-dev, idea://, pycharm://, etc.
   * If the host does not support URIs it should return empty.
   */
  getIdeRedirectUri: {
    path: "/host.EnvService/getIdeRedirectUri",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EmptyRequest) => Buffer.from(EmptyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => EmptyRequest.decode(value),
    responseSerialize: (value: String) => Buffer.from(String.encode(value).finish()),
    responseDeserialize: (value: Buffer) => String.decode(value),
  },
  /**
   * Returns the telemetry settings of the host environment. This may return UNSUPPORTED
   * if the host does not specify telemetry settings for the plugin.
   */
  getTelemetrySettings: {
    path: "/host.EnvService/getTelemetrySettings",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EmptyRequest) => Buffer.from(EmptyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => EmptyRequest.decode(value),
    responseSerialize: (value: GetTelemetrySettingsResponse) =>
      Buffer.from(GetTelemetrySettingsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetTelemetrySettingsResponse.decode(value),
  },
  /** Returns events when the telemetry settings change. */
  subscribeToTelemetrySettings: {
    path: "/host.EnvService/subscribeToTelemetrySettings",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: EmptyRequest) => Buffer.from(EmptyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => EmptyRequest.decode(value),
    responseSerialize: (value: TelemetrySettingsEvent) => Buffer.from(TelemetrySettingsEvent.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TelemetrySettingsEvent.decode(value),
  },
} as const;

export interface EnvServiceServer extends UntypedServiceImplementation {
  /** Writes text to the system clipboard. */
  clipboardWriteText: handleUnaryCall<StringRequest, Empty>;
  /** Reads text from the system clipboard. */
  clipboardReadText: handleUnaryCall<EmptyRequest, String>;
  /** Returns a stable machine identifier for telemetry distinctId purposes. */
  getMachineId: handleUnaryCall<EmptyRequest, String>;
  /** Returns the name and version of the host IDE or environment. */
  getHostVersion: handleUnaryCall<EmptyRequest, GetHostVersionResponse>;
  /**
   * Returns a URI that will redirect to the host environment.
   * e.g. vscode://saoudrizwan.claude-dev, idea://, pycharm://, etc.
   * If the host does not support URIs it should return empty.
   */
  getIdeRedirectUri: handleUnaryCall<EmptyRequest, String>;
  /**
   * Returns the telemetry settings of the host environment. This may return UNSUPPORTED
   * if the host does not specify telemetry settings for the plugin.
   */
  getTelemetrySettings: handleUnaryCall<EmptyRequest, GetTelemetrySettingsResponse>;
  /** Returns events when the telemetry settings change. */
  subscribeToTelemetrySettings: handleServerStreamingCall<EmptyRequest, TelemetrySettingsEvent>;
}

export interface EnvServiceClient extends Client {
  /** Writes text to the system clipboard. */
  clipboardWriteText(
    request: StringRequest,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  clipboardWriteText(
    request: StringRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  clipboardWriteText(
    request: StringRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  /** Reads text from the system clipboard. */
  clipboardReadText(
    request: EmptyRequest,
    callback: (error: ServiceError | null, response: String) => void,
  ): ClientUnaryCall;
  clipboardReadText(
    request: EmptyRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: String) => void,
  ): ClientUnaryCall;
  clipboardReadText(
    request: EmptyRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: String) => void,
  ): ClientUnaryCall;
  /** Returns a stable machine identifier for telemetry distinctId purposes. */
  getMachineId(
    request: EmptyRequest,
    callback: (error: ServiceError | null, response: String) => void,
  ): ClientUnaryCall;
  getMachineId(
    request: EmptyRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: String) => void,
  ): ClientUnaryCall;
  getMachineId(
    request: EmptyRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: String) => void,
  ): ClientUnaryCall;
  /** Returns the name and version of the host IDE or environment. */
  getHostVersion(
    request: EmptyRequest,
    callback: (error: ServiceError | null, response: GetHostVersionResponse) => void,
  ): ClientUnaryCall;
  getHostVersion(
    request: EmptyRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetHostVersionResponse) => void,
  ): ClientUnaryCall;
  getHostVersion(
    request: EmptyRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetHostVersionResponse) => void,
  ): ClientUnaryCall;
  /**
   * Returns a URI that will redirect to the host environment.
   * e.g. vscode://saoudrizwan.claude-dev, idea://, pycharm://, etc.
   * If the host does not support URIs it should return empty.
   */
  getIdeRedirectUri(
    request: EmptyRequest,
    callback: (error: ServiceError | null, response: String) => void,
  ): ClientUnaryCall;
  getIdeRedirectUri(
    request: EmptyRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: String) => void,
  ): ClientUnaryCall;
  getIdeRedirectUri(
    request: EmptyRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: String) => void,
  ): ClientUnaryCall;
  /**
   * Returns the telemetry settings of the host environment. This may return UNSUPPORTED
   * if the host does not specify telemetry settings for the plugin.
   */
  getTelemetrySettings(
    request: EmptyRequest,
    callback: (error: ServiceError | null, response: GetTelemetrySettingsResponse) => void,
  ): ClientUnaryCall;
  getTelemetrySettings(
    request: EmptyRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetTelemetrySettingsResponse) => void,
  ): ClientUnaryCall;
  getTelemetrySettings(
    request: EmptyRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetTelemetrySettingsResponse) => void,
  ): ClientUnaryCall;
  /** Returns events when the telemetry settings change. */
  subscribeToTelemetrySettings(
    request: EmptyRequest,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<TelemetrySettingsEvent>;
  subscribeToTelemetrySettings(
    request: EmptyRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<TelemetrySettingsEvent>;
}

export const EnvServiceClient = makeGenericClientConstructor(EnvServiceService, "host.EnvService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): EnvServiceClient;
  service: typeof EnvServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
