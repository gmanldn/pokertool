// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.19.1
// source: cline/oca_account.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientReadableStream,
  type ClientUnaryCall,
  type handleServerStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Empty, EmptyRequest, String } from "./common";

export interface OcaAuthState {
  user?: OcaUserInfo | undefined;
  apiKey?: string | undefined;
}

/** User's information */
export interface OcaUserInfo {
  uid: string;
  displayName?: string | undefined;
  email?: string | undefined;
}

function createBaseOcaAuthState(): OcaAuthState {
  return { user: undefined, apiKey: undefined };
}

export const OcaAuthState: MessageFns<OcaAuthState> = {
  encode(message: OcaAuthState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      OcaUserInfo.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.apiKey !== undefined) {
      writer.uint32(18).string(message.apiKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OcaAuthState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOcaAuthState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = OcaUserInfo.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.apiKey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OcaAuthState {
    return {
      user: isSet(object.user) ? OcaUserInfo.fromJSON(object.user) : undefined,
      apiKey: isSet(object.apiKey) ? globalThis.String(object.apiKey) : undefined,
    };
  },

  toJSON(message: OcaAuthState): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = OcaUserInfo.toJSON(message.user);
    }
    if (message.apiKey !== undefined) {
      obj.apiKey = message.apiKey;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OcaAuthState>, I>>(base?: I): OcaAuthState {
    return OcaAuthState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OcaAuthState>, I>>(object: I): OcaAuthState {
    const message = createBaseOcaAuthState();
    message.user = (object.user !== undefined && object.user !== null)
      ? OcaUserInfo.fromPartial(object.user)
      : undefined;
    message.apiKey = object.apiKey ?? undefined;
    return message;
  },
};

function createBaseOcaUserInfo(): OcaUserInfo {
  return { uid: "", displayName: undefined, email: undefined };
}

export const OcaUserInfo: MessageFns<OcaUserInfo> = {
  encode(message: OcaUserInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uid !== "") {
      writer.uint32(10).string(message.uid);
    }
    if (message.displayName !== undefined) {
      writer.uint32(18).string(message.displayName);
    }
    if (message.email !== undefined) {
      writer.uint32(26).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OcaUserInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOcaUserInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OcaUserInfo {
    return {
      uid: isSet(object.uid) ? globalThis.String(object.uid) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : undefined,
      email: isSet(object.email) ? globalThis.String(object.email) : undefined,
    };
  },

  toJSON(message: OcaUserInfo): unknown {
    const obj: any = {};
    if (message.uid !== "") {
      obj.uid = message.uid;
    }
    if (message.displayName !== undefined) {
      obj.displayName = message.displayName;
    }
    if (message.email !== undefined) {
      obj.email = message.email;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OcaUserInfo>, I>>(base?: I): OcaUserInfo {
    return OcaUserInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OcaUserInfo>, I>>(object: I): OcaUserInfo {
    const message = createBaseOcaUserInfo();
    message.uid = object.uid ?? "";
    message.displayName = object.displayName ?? undefined;
    message.email = object.email ?? undefined;
    return message;
  },
};

/** Service for account-related operations */
export type OcaAccountServiceDefinition = typeof OcaAccountServiceDefinition;
export const OcaAccountServiceDefinition = {
  name: "OcaAccountService",
  fullName: "cline.OcaAccountService",
  methods: {
    /**
     * Handles the user clicking the login link in the UI.
     * Generates a secure nonce for state validation, stores it in secrets,
     * and opens the authentication URL in the external browser.
     */
    ocaAccountLoginClicked: {
      name: "ocaAccountLoginClicked",
      requestType: EmptyRequest,
      requestStream: false,
      responseType: String,
      responseStream: false,
      options: {},
    },
    /**
     * Handles the user clicking the logout button in the UI.
     * Clears API keys and user state.
     */
    ocaAccountLogoutClicked: {
      name: "ocaAccountLogoutClicked",
      requestType: EmptyRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    /** Subscribe to auth status update events (when authentication state changes) */
    ocaSubscribeToAuthStatusUpdate: {
      name: "ocaSubscribeToAuthStatusUpdate",
      requestType: EmptyRequest,
      requestStream: false,
      responseType: OcaAuthState,
      responseStream: true,
      options: {},
    },
  },
} as const;

/** Service for account-related operations */
export type OcaAccountServiceService = typeof OcaAccountServiceService;
export const OcaAccountServiceService = {
  /**
   * Handles the user clicking the login link in the UI.
   * Generates a secure nonce for state validation, stores it in secrets,
   * and opens the authentication URL in the external browser.
   */
  ocaAccountLoginClicked: {
    path: "/cline.OcaAccountService/ocaAccountLoginClicked",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EmptyRequest) => Buffer.from(EmptyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => EmptyRequest.decode(value),
    responseSerialize: (value: String) => Buffer.from(String.encode(value).finish()),
    responseDeserialize: (value: Buffer) => String.decode(value),
  },
  /**
   * Handles the user clicking the logout button in the UI.
   * Clears API keys and user state.
   */
  ocaAccountLogoutClicked: {
    path: "/cline.OcaAccountService/ocaAccountLogoutClicked",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EmptyRequest) => Buffer.from(EmptyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => EmptyRequest.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
  /** Subscribe to auth status update events (when authentication state changes) */
  ocaSubscribeToAuthStatusUpdate: {
    path: "/cline.OcaAccountService/ocaSubscribeToAuthStatusUpdate",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: EmptyRequest) => Buffer.from(EmptyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => EmptyRequest.decode(value),
    responseSerialize: (value: OcaAuthState) => Buffer.from(OcaAuthState.encode(value).finish()),
    responseDeserialize: (value: Buffer) => OcaAuthState.decode(value),
  },
} as const;

export interface OcaAccountServiceServer extends UntypedServiceImplementation {
  /**
   * Handles the user clicking the login link in the UI.
   * Generates a secure nonce for state validation, stores it in secrets,
   * and opens the authentication URL in the external browser.
   */
  ocaAccountLoginClicked: handleUnaryCall<EmptyRequest, String>;
  /**
   * Handles the user clicking the logout button in the UI.
   * Clears API keys and user state.
   */
  ocaAccountLogoutClicked: handleUnaryCall<EmptyRequest, Empty>;
  /** Subscribe to auth status update events (when authentication state changes) */
  ocaSubscribeToAuthStatusUpdate: handleServerStreamingCall<EmptyRequest, OcaAuthState>;
}

export interface OcaAccountServiceClient extends Client {
  /**
   * Handles the user clicking the login link in the UI.
   * Generates a secure nonce for state validation, stores it in secrets,
   * and opens the authentication URL in the external browser.
   */
  ocaAccountLoginClicked(
    request: EmptyRequest,
    callback: (error: ServiceError | null, response: String) => void,
  ): ClientUnaryCall;
  ocaAccountLoginClicked(
    request: EmptyRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: String) => void,
  ): ClientUnaryCall;
  ocaAccountLoginClicked(
    request: EmptyRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: String) => void,
  ): ClientUnaryCall;
  /**
   * Handles the user clicking the logout button in the UI.
   * Clears API keys and user state.
   */
  ocaAccountLogoutClicked(
    request: EmptyRequest,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  ocaAccountLogoutClicked(
    request: EmptyRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  ocaAccountLogoutClicked(
    request: EmptyRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  /** Subscribe to auth status update events (when authentication state changes) */
  ocaSubscribeToAuthStatusUpdate(
    request: EmptyRequest,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<OcaAuthState>;
  ocaSubscribeToAuthStatusUpdate(
    request: EmptyRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<OcaAuthState>;
}

export const OcaAccountServiceClient = makeGenericClientConstructor(
  OcaAccountServiceService,
  "cline.OcaAccountService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): OcaAccountServiceClient;
  service: typeof OcaAccountServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
