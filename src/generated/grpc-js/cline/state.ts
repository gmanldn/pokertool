// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.19.1
// source: cline/state.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientReadableStream,
  type ClientUnaryCall,
  type handleServerStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Boolean, BooleanRequest, Empty, EmptyRequest, Metadata as Metadata1, StringRequest } from "./common";
import {
  ApiProvider,
  apiProviderFromJSON,
  apiProviderToJSON,
  LanguageModelChatSelector,
  LiteLLMModelInfo,
  OcaModelInfo,
  OpenAiCompatibleModelInfo,
  OpenRouterModelInfo,
} from "./models";

export enum PlanActMode {
  PLAN = 0,
  ACT = 1,
  UNRECOGNIZED = -1,
}

export function planActModeFromJSON(object: any): PlanActMode {
  switch (object) {
    case 0:
    case "PLAN":
      return PlanActMode.PLAN;
    case 1:
    case "ACT":
      return PlanActMode.ACT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PlanActMode.UNRECOGNIZED;
  }
}

export function planActModeToJSON(object: PlanActMode): string {
  switch (object) {
    case PlanActMode.PLAN:
      return "PLAN";
    case PlanActMode.ACT:
      return "ACT";
    case PlanActMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum OpenaiReasoningEffort {
  LOW = 0,
  MEDIUM = 1,
  HIGH = 2,
  MINIMAL = 3,
  UNRECOGNIZED = -1,
}

export function openaiReasoningEffortFromJSON(object: any): OpenaiReasoningEffort {
  switch (object) {
    case 0:
    case "LOW":
      return OpenaiReasoningEffort.LOW;
    case 1:
    case "MEDIUM":
      return OpenaiReasoningEffort.MEDIUM;
    case 2:
    case "HIGH":
      return OpenaiReasoningEffort.HIGH;
    case 3:
    case "MINIMAL":
      return OpenaiReasoningEffort.MINIMAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OpenaiReasoningEffort.UNRECOGNIZED;
  }
}

export function openaiReasoningEffortToJSON(object: OpenaiReasoningEffort): string {
  switch (object) {
    case OpenaiReasoningEffort.LOW:
      return "LOW";
    case OpenaiReasoningEffort.MEDIUM:
      return "MEDIUM";
    case OpenaiReasoningEffort.HIGH:
      return "HIGH";
    case OpenaiReasoningEffort.MINIMAL:
      return "MINIMAL";
    case OpenaiReasoningEffort.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum McpDisplayMode {
  RICH = 0,
  PLAIN = 1,
  MARKDOWN = 2,
  UNRECOGNIZED = -1,
}

export function mcpDisplayModeFromJSON(object: any): McpDisplayMode {
  switch (object) {
    case 0:
    case "RICH":
      return McpDisplayMode.RICH;
    case 1:
    case "PLAIN":
      return McpDisplayMode.PLAIN;
    case 2:
    case "MARKDOWN":
      return McpDisplayMode.MARKDOWN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return McpDisplayMode.UNRECOGNIZED;
  }
}

export function mcpDisplayModeToJSON(object: McpDisplayMode): string {
  switch (object) {
    case McpDisplayMode.RICH:
      return "RICH";
    case McpDisplayMode.PLAIN:
      return "PLAIN";
    case McpDisplayMode.MARKDOWN:
      return "MARKDOWN";
    case McpDisplayMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum TelemetrySettingEnum {
  UNSET = 0,
  ENABLED = 1,
  DISABLED = 2,
  UNRECOGNIZED = -1,
}

export function telemetrySettingEnumFromJSON(object: any): TelemetrySettingEnum {
  switch (object) {
    case 0:
    case "UNSET":
      return TelemetrySettingEnum.UNSET;
    case 1:
    case "ENABLED":
      return TelemetrySettingEnum.ENABLED;
    case 2:
    case "DISABLED":
      return TelemetrySettingEnum.DISABLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TelemetrySettingEnum.UNRECOGNIZED;
  }
}

export function telemetrySettingEnumToJSON(object: TelemetrySettingEnum): string {
  switch (object) {
    case TelemetrySettingEnum.UNSET:
      return "UNSET";
    case TelemetrySettingEnum.ENABLED:
      return "ENABLED";
    case TelemetrySettingEnum.DISABLED:
      return "DISABLED";
    case TelemetrySettingEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface State {
  stateJson: string;
}

export interface TerminalProfiles {
  profiles: TerminalProfile[];
}

export interface TerminalProfile {
  id: string;
  name: string;
  path?: string | undefined;
  description?: string | undefined;
}

export interface TerminalProfileUpdateResponse {
  closedCount: number;
  busyTerminalsCount: number;
  hasBusyTerminals: boolean;
}

export interface TogglePlanActModeRequest {
  metadata: Metadata1 | undefined;
  mode: PlanActMode;
  chatContent?: ChatContent | undefined;
}

export interface ChatContent {
  message?: string | undefined;
  images: string[];
  files: string[];
}

export interface ResetStateRequest {
  metadata: Metadata1 | undefined;
  global?: boolean | undefined;
}

export interface AutoApprovalSettingsRequest {
  metadata: Metadata1 | undefined;
  version: number;
  enabled: boolean;
  actions: AutoApprovalSettingsRequest_Actions | undefined;
  maxRequests: number;
  enableNotifications: boolean;
  favorites: string[];
}

export interface AutoApprovalSettingsRequest_Actions {
  readFiles: boolean;
  readFilesExternally: boolean;
  editFiles: boolean;
  editFilesExternally: boolean;
  executeSafeCommands: boolean;
  executeAllCommands: boolean;
  useBrowser: boolean;
  useMcp: boolean;
}

export interface TelemetrySettingRequest {
  metadata: Metadata1 | undefined;
  setting: TelemetrySettingEnum;
}

/** Browser settings for UpdateSettingsRequest */
export interface BrowserSettingsUpdate {
  viewport?: Viewport | undefined;
  remoteBrowserHost?: string | undefined;
  remoteBrowserEnabled?: boolean | undefined;
  chromeExecutablePath?: string | undefined;
  disableToolUse?: boolean | undefined;
  customArgs?: string | undefined;
}

/** Message for updating settings */
export interface UpdateSettingsRequest {
  metadata: Metadata1 | undefined;
  apiConfiguration?: ApiConfiguration | undefined;
  telemetrySetting?: string | undefined;
  planActSeparateModelsSetting?: boolean | undefined;
  enableCheckpointsSetting?: boolean | undefined;
  mcpMarketplaceEnabled?: boolean | undefined;
  shellIntegrationTimeout?: number | undefined;
  terminalReuseEnabled?: boolean | undefined;
  mcpResponsesCollapsed?: boolean | undefined;
  mcpDisplayMode?: McpDisplayMode | undefined;
  terminalOutputLineLimit?: number | undefined;
  mode?: PlanActMode | undefined;
  preferredLanguage?: string | undefined;
  openaiReasoningEffort?: OpenaiReasoningEffort | undefined;
  strictPlanModeEnabled?: boolean | undefined;
  focusChainSettings?: FocusChainSettings | undefined;
  useAutoCondense?: boolean | undefined;
  customPrompt?: string | undefined;
  browserSettings?: BrowserSettingsUpdate | undefined;
  defaultTerminalProfile?: string | undefined;
  yoloModeToggled?: boolean | undefined;
}

/** Complete API Configuration message */
export interface ApiConfiguration {
  /** Global configuration fields (not mode-specific) */
  apiKey?: string | undefined;
  clineApiKey?: string | undefined;
  ulid?: string | undefined;
  liteLlmBaseUrl?: string | undefined;
  liteLlmApiKey?: string | undefined;
  liteLlmUsePromptCache?: boolean | undefined;
  openAiHeaders: { [key: string]: string };
  anthropicBaseUrl?: string | undefined;
  openRouterApiKey?: string | undefined;
  openRouterProviderSorting?: string | undefined;
  awsAccessKey?: string | undefined;
  awsSecretKey?: string | undefined;
  awsSessionToken?: string | undefined;
  awsRegion?: string | undefined;
  awsUseCrossRegionInference?: boolean | undefined;
  awsBedrockUsePromptCache?: boolean | undefined;
  awsUseProfile?: boolean | undefined;
  awsProfile?: string | undefined;
  awsBedrockEndpoint?: string | undefined;
  claudeCodePath?: string | undefined;
  vertexProjectId?: string | undefined;
  vertexRegion?: string | undefined;
  openAiBaseUrl?: string | undefined;
  openAiApiKey?: string | undefined;
  ollamaBaseUrl?: string | undefined;
  ollamaApiOptionsCtxNum?: string | undefined;
  lmStudioBaseUrl?: string | undefined;
  geminiApiKey?: string | undefined;
  geminiBaseUrl?: string | undefined;
  openAiNativeApiKey?: string | undefined;
  deepSeekApiKey?: string | undefined;
  requestyApiKey?: string | undefined;
  requestyBaseUrl?: string | undefined;
  togetherApiKey?: string | undefined;
  fireworksApiKey?: string | undefined;
  fireworksModelMaxCompletionTokens?: number | undefined;
  fireworksModelMaxTokens?: number | undefined;
  qwenApiKey?: string | undefined;
  doubaoApiKey?: string | undefined;
  mistralApiKey?: string | undefined;
  azureApiVersion?: string | undefined;
  qwenApiLine?: string | undefined;
  nebiusApiKey?: string | undefined;
  asksageApiUrl?: string | undefined;
  asksageApiKey?: string | undefined;
  xaiApiKey?: string | undefined;
  sambanovaApiKey?: string | undefined;
  cerebrasApiKey?: string | undefined;
  requestTimeoutMs?: number | undefined;
  sapAiCoreClientId?: string | undefined;
  sapAiCoreClientSecret?: string | undefined;
  sapAiResourceGroup?: string | undefined;
  sapAiCoreTokenUrl?: string | undefined;
  sapAiCoreBaseUrl?: string | undefined;
  moonshotApiKey?: string | undefined;
  moonshotApiLine?: string | undefined;
  huaweiCloudMaasApiKey?: string | undefined;
  ollamaApiKey?: string | undefined;
  zaiApiKey?: string | undefined;
  zaiApiLine?: string | undefined;
  lmStudioMaxTokens?: string | undefined;
  vercelAiGatewayApiKey?: string | undefined;
  qwenCodeOauthPath?: string | undefined;
  difyApiKey?: string | undefined;
  difyBaseUrl?: string | undefined;
  ocaBaseUrl?: string | undefined;
  ocaApiKey?: string | undefined;
  ocaRefreshToken?:
    | string
    | undefined;
  /** Plan mode configurations */
  planModeApiProvider?: ApiProvider | undefined;
  planModeApiModelId?: string | undefined;
  planModeThinkingBudgetTokens?: number | undefined;
  planModeReasoningEffort?: string | undefined;
  planModeVsCodeLmModelSelector?: LanguageModelChatSelector | undefined;
  planModeAwsBedrockCustomSelected?: boolean | undefined;
  planModeAwsBedrockCustomModelBaseId?: string | undefined;
  planModeOpenRouterModelId?: string | undefined;
  planModeOpenRouterModelInfo?: OpenRouterModelInfo | undefined;
  planModeOpenAiModelId?: string | undefined;
  planModeOpenAiModelInfo?: OpenAiCompatibleModelInfo | undefined;
  planModeOllamaModelId?: string | undefined;
  planModeLmStudioModelId?: string | undefined;
  planModeLiteLlmModelId?: string | undefined;
  planModeLiteLlmModelInfo?: LiteLLMModelInfo | undefined;
  planModeRequestyModelId?: string | undefined;
  planModeRequestyModelInfo?: OpenRouterModelInfo | undefined;
  planModeTogetherModelId?: string | undefined;
  planModeFireworksModelId?: string | undefined;
  planModeSapAiCoreModelId?: string | undefined;
  planModeHuaweiCloudMaasModelId?: string | undefined;
  planModeHuaweiCloudMaasModelInfo?: OpenRouterModelInfo | undefined;
  planModeVercelAiGatewayModelId?: string | undefined;
  planModeVercelAiGatewayModelInfo?: OpenRouterModelInfo | undefined;
  planModeOcaModelId?: string | undefined;
  planModeOcaModelInfo?:
    | OcaModelInfo
    | undefined;
  /** Act mode configurations */
  actModeApiProvider?: ApiProvider | undefined;
  actModeApiModelId?: string | undefined;
  actModeThinkingBudgetTokens?: number | undefined;
  actModeReasoningEffort?: string | undefined;
  actModeVsCodeLmModelSelector?: LanguageModelChatSelector | undefined;
  actModeAwsBedrockCustomSelected?: boolean | undefined;
  actModeAwsBedrockCustomModelBaseId?: string | undefined;
  actModeOpenRouterModelId?: string | undefined;
  actModeOpenRouterModelInfo?: OpenRouterModelInfo | undefined;
  actModeOpenAiModelId?: string | undefined;
  actModeOpenAiModelInfo?: OpenAiCompatibleModelInfo | undefined;
  actModeOllamaModelId?: string | undefined;
  actModeLmStudioModelId?: string | undefined;
  actModeLiteLlmModelId?: string | undefined;
  actModeLiteLlmModelInfo?: LiteLLMModelInfo | undefined;
  actModeRequestyModelId?: string | undefined;
  actModeRequestyModelInfo?: OpenRouterModelInfo | undefined;
  actModeTogetherModelId?: string | undefined;
  actModeFireworksModelId?: string | undefined;
  actModeSapAiCoreModelId?: string | undefined;
  actModeHuaweiCloudMaasModelId?: string | undefined;
  actModeHuaweiCloudMaasModelInfo?: OpenRouterModelInfo | undefined;
  actModeVercelAiGatewayModelId?: string | undefined;
  actModeVercelAiGatewayModelInfo?: OpenRouterModelInfo | undefined;
  actModeOcaModelId?: string | undefined;
  actModeOcaModelInfo?:
    | OcaModelInfo
    | undefined;
  /** Extension fields for Bedrock Api Keys */
  awsAuthentication?: string | undefined;
  awsBedrockApiKey?: string | undefined;
  clineAccountId?: string | undefined;
}

export interface ApiConfiguration_OpenAiHeadersEntry {
  key: string;
  value: string;
}

export interface UpdateTerminalConnectionTimeoutRequest {
  timeoutMs?: number | undefined;
}

export interface FocusChainSettings {
  enabled: boolean;
  remindClineInterval: number;
}

export interface Viewport {
  width: number;
  height: number;
}

export interface UpdateTerminalConnectionTimeoutResponse {
  timeoutMs?: number | undefined;
}

function createBaseState(): State {
  return { stateJson: "" };
}

export const State: MessageFns<State> = {
  encode(message: State, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stateJson !== "") {
      writer.uint32(10).string(message.stateJson);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): State {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stateJson = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): State {
    return { stateJson: isSet(object.stateJson) ? globalThis.String(object.stateJson) : "" };
  },

  toJSON(message: State): unknown {
    const obj: any = {};
    if (message.stateJson !== "") {
      obj.stateJson = message.stateJson;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<State>, I>>(base?: I): State {
    return State.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<State>, I>>(object: I): State {
    const message = createBaseState();
    message.stateJson = object.stateJson ?? "";
    return message;
  },
};

function createBaseTerminalProfiles(): TerminalProfiles {
  return { profiles: [] };
}

export const TerminalProfiles: MessageFns<TerminalProfiles> = {
  encode(message: TerminalProfiles, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.profiles) {
      TerminalProfile.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TerminalProfiles {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTerminalProfiles();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profiles.push(TerminalProfile.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TerminalProfiles {
    return {
      profiles: globalThis.Array.isArray(object?.profiles)
        ? object.profiles.map((e: any) => TerminalProfile.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TerminalProfiles): unknown {
    const obj: any = {};
    if (message.profiles?.length) {
      obj.profiles = message.profiles.map((e) => TerminalProfile.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TerminalProfiles>, I>>(base?: I): TerminalProfiles {
    return TerminalProfiles.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TerminalProfiles>, I>>(object: I): TerminalProfiles {
    const message = createBaseTerminalProfiles();
    message.profiles = object.profiles?.map((e) => TerminalProfile.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTerminalProfile(): TerminalProfile {
  return { id: "", name: "", path: undefined, description: undefined };
}

export const TerminalProfile: MessageFns<TerminalProfile> = {
  encode(message: TerminalProfile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.path !== undefined) {
      writer.uint32(26).string(message.path);
    }
    if (message.description !== undefined) {
      writer.uint32(34).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TerminalProfile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTerminalProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TerminalProfile {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
    };
  },

  toJSON(message: TerminalProfile): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.path !== undefined) {
      obj.path = message.path;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TerminalProfile>, I>>(base?: I): TerminalProfile {
    return TerminalProfile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TerminalProfile>, I>>(object: I): TerminalProfile {
    const message = createBaseTerminalProfile();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.path = object.path ?? undefined;
    message.description = object.description ?? undefined;
    return message;
  },
};

function createBaseTerminalProfileUpdateResponse(): TerminalProfileUpdateResponse {
  return { closedCount: 0, busyTerminalsCount: 0, hasBusyTerminals: false };
}

export const TerminalProfileUpdateResponse: MessageFns<TerminalProfileUpdateResponse> = {
  encode(message: TerminalProfileUpdateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.closedCount !== 0) {
      writer.uint32(8).int32(message.closedCount);
    }
    if (message.busyTerminalsCount !== 0) {
      writer.uint32(16).int32(message.busyTerminalsCount);
    }
    if (message.hasBusyTerminals !== false) {
      writer.uint32(24).bool(message.hasBusyTerminals);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TerminalProfileUpdateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTerminalProfileUpdateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.closedCount = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.busyTerminalsCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.hasBusyTerminals = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TerminalProfileUpdateResponse {
    return {
      closedCount: isSet(object.closedCount) ? globalThis.Number(object.closedCount) : 0,
      busyTerminalsCount: isSet(object.busyTerminalsCount) ? globalThis.Number(object.busyTerminalsCount) : 0,
      hasBusyTerminals: isSet(object.hasBusyTerminals) ? globalThis.Boolean(object.hasBusyTerminals) : false,
    };
  },

  toJSON(message: TerminalProfileUpdateResponse): unknown {
    const obj: any = {};
    if (message.closedCount !== 0) {
      obj.closedCount = Math.round(message.closedCount);
    }
    if (message.busyTerminalsCount !== 0) {
      obj.busyTerminalsCount = Math.round(message.busyTerminalsCount);
    }
    if (message.hasBusyTerminals !== false) {
      obj.hasBusyTerminals = message.hasBusyTerminals;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TerminalProfileUpdateResponse>, I>>(base?: I): TerminalProfileUpdateResponse {
    return TerminalProfileUpdateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TerminalProfileUpdateResponse>, I>>(
    object: I,
  ): TerminalProfileUpdateResponse {
    const message = createBaseTerminalProfileUpdateResponse();
    message.closedCount = object.closedCount ?? 0;
    message.busyTerminalsCount = object.busyTerminalsCount ?? 0;
    message.hasBusyTerminals = object.hasBusyTerminals ?? false;
    return message;
  },
};

function createBaseTogglePlanActModeRequest(): TogglePlanActModeRequest {
  return { metadata: undefined, mode: 0, chatContent: undefined };
}

export const TogglePlanActModeRequest: MessageFns<TogglePlanActModeRequest> = {
  encode(message: TogglePlanActModeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      Metadata1.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    if (message.mode !== 0) {
      writer.uint32(16).int32(message.mode);
    }
    if (message.chatContent !== undefined) {
      ChatContent.encode(message.chatContent, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TogglePlanActModeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTogglePlanActModeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata = Metadata1.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.mode = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.chatContent = ChatContent.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TogglePlanActModeRequest {
    return {
      metadata: isSet(object.metadata) ? Metadata1.fromJSON(object.metadata) : undefined,
      mode: isSet(object.mode) ? planActModeFromJSON(object.mode) : 0,
      chatContent: isSet(object.chatContent) ? ChatContent.fromJSON(object.chatContent) : undefined,
    };
  },

  toJSON(message: TogglePlanActModeRequest): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = Metadata1.toJSON(message.metadata);
    }
    if (message.mode !== 0) {
      obj.mode = planActModeToJSON(message.mode);
    }
    if (message.chatContent !== undefined) {
      obj.chatContent = ChatContent.toJSON(message.chatContent);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TogglePlanActModeRequest>, I>>(base?: I): TogglePlanActModeRequest {
    return TogglePlanActModeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TogglePlanActModeRequest>, I>>(object: I): TogglePlanActModeRequest {
    const message = createBaseTogglePlanActModeRequest();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata1.fromPartial(object.metadata)
      : undefined;
    message.mode = object.mode ?? 0;
    message.chatContent = (object.chatContent !== undefined && object.chatContent !== null)
      ? ChatContent.fromPartial(object.chatContent)
      : undefined;
    return message;
  },
};

function createBaseChatContent(): ChatContent {
  return { message: undefined, images: [], files: [] };
}

export const ChatContent: MessageFns<ChatContent> = {
  encode(message: ChatContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== undefined) {
      writer.uint32(10).string(message.message);
    }
    for (const v of message.images) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.files) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChatContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.images.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.files.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChatContent {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : undefined,
      images: globalThis.Array.isArray(object?.images) ? object.images.map((e: any) => globalThis.String(e)) : [],
      files: globalThis.Array.isArray(object?.files) ? object.files.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: ChatContent): unknown {
    const obj: any = {};
    if (message.message !== undefined) {
      obj.message = message.message;
    }
    if (message.images?.length) {
      obj.images = message.images;
    }
    if (message.files?.length) {
      obj.files = message.files;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChatContent>, I>>(base?: I): ChatContent {
    return ChatContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChatContent>, I>>(object: I): ChatContent {
    const message = createBaseChatContent();
    message.message = object.message ?? undefined;
    message.images = object.images?.map((e) => e) || [];
    message.files = object.files?.map((e) => e) || [];
    return message;
  },
};

function createBaseResetStateRequest(): ResetStateRequest {
  return { metadata: undefined, global: undefined };
}

export const ResetStateRequest: MessageFns<ResetStateRequest> = {
  encode(message: ResetStateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      Metadata1.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    if (message.global !== undefined) {
      writer.uint32(16).bool(message.global);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetStateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetStateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata = Metadata1.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.global = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetStateRequest {
    return {
      metadata: isSet(object.metadata) ? Metadata1.fromJSON(object.metadata) : undefined,
      global: isSet(object.global) ? globalThis.Boolean(object.global) : undefined,
    };
  },

  toJSON(message: ResetStateRequest): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = Metadata1.toJSON(message.metadata);
    }
    if (message.global !== undefined) {
      obj.global = message.global;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetStateRequest>, I>>(base?: I): ResetStateRequest {
    return ResetStateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetStateRequest>, I>>(object: I): ResetStateRequest {
    const message = createBaseResetStateRequest();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata1.fromPartial(object.metadata)
      : undefined;
    message.global = object.global ?? undefined;
    return message;
  },
};

function createBaseAutoApprovalSettingsRequest(): AutoApprovalSettingsRequest {
  return {
    metadata: undefined,
    version: 0,
    enabled: false,
    actions: undefined,
    maxRequests: 0,
    enableNotifications: false,
    favorites: [],
  };
}

export const AutoApprovalSettingsRequest: MessageFns<AutoApprovalSettingsRequest> = {
  encode(message: AutoApprovalSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      Metadata1.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    if (message.version !== 0) {
      writer.uint32(16).int32(message.version);
    }
    if (message.enabled !== false) {
      writer.uint32(24).bool(message.enabled);
    }
    if (message.actions !== undefined) {
      AutoApprovalSettingsRequest_Actions.encode(message.actions, writer.uint32(34).fork()).join();
    }
    if (message.maxRequests !== 0) {
      writer.uint32(40).int32(message.maxRequests);
    }
    if (message.enableNotifications !== false) {
      writer.uint32(48).bool(message.enableNotifications);
    }
    for (const v of message.favorites) {
      writer.uint32(58).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutoApprovalSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutoApprovalSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata = Metadata1.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.version = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.actions = AutoApprovalSettingsRequest_Actions.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.maxRequests = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.enableNotifications = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.favorites.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutoApprovalSettingsRequest {
    return {
      metadata: isSet(object.metadata) ? Metadata1.fromJSON(object.metadata) : undefined,
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      actions: isSet(object.actions) ? AutoApprovalSettingsRequest_Actions.fromJSON(object.actions) : undefined,
      maxRequests: isSet(object.maxRequests) ? globalThis.Number(object.maxRequests) : 0,
      enableNotifications: isSet(object.enableNotifications) ? globalThis.Boolean(object.enableNotifications) : false,
      favorites: globalThis.Array.isArray(object?.favorites)
        ? object.favorites.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: AutoApprovalSettingsRequest): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = Metadata1.toJSON(message.metadata);
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.actions !== undefined) {
      obj.actions = AutoApprovalSettingsRequest_Actions.toJSON(message.actions);
    }
    if (message.maxRequests !== 0) {
      obj.maxRequests = Math.round(message.maxRequests);
    }
    if (message.enableNotifications !== false) {
      obj.enableNotifications = message.enableNotifications;
    }
    if (message.favorites?.length) {
      obj.favorites = message.favorites;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AutoApprovalSettingsRequest>, I>>(base?: I): AutoApprovalSettingsRequest {
    return AutoApprovalSettingsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AutoApprovalSettingsRequest>, I>>(object: I): AutoApprovalSettingsRequest {
    const message = createBaseAutoApprovalSettingsRequest();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata1.fromPartial(object.metadata)
      : undefined;
    message.version = object.version ?? 0;
    message.enabled = object.enabled ?? false;
    message.actions = (object.actions !== undefined && object.actions !== null)
      ? AutoApprovalSettingsRequest_Actions.fromPartial(object.actions)
      : undefined;
    message.maxRequests = object.maxRequests ?? 0;
    message.enableNotifications = object.enableNotifications ?? false;
    message.favorites = object.favorites?.map((e) => e) || [];
    return message;
  },
};

function createBaseAutoApprovalSettingsRequest_Actions(): AutoApprovalSettingsRequest_Actions {
  return {
    readFiles: false,
    readFilesExternally: false,
    editFiles: false,
    editFilesExternally: false,
    executeSafeCommands: false,
    executeAllCommands: false,
    useBrowser: false,
    useMcp: false,
  };
}

export const AutoApprovalSettingsRequest_Actions: MessageFns<AutoApprovalSettingsRequest_Actions> = {
  encode(message: AutoApprovalSettingsRequest_Actions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.readFiles !== false) {
      writer.uint32(8).bool(message.readFiles);
    }
    if (message.readFilesExternally !== false) {
      writer.uint32(16).bool(message.readFilesExternally);
    }
    if (message.editFiles !== false) {
      writer.uint32(24).bool(message.editFiles);
    }
    if (message.editFilesExternally !== false) {
      writer.uint32(32).bool(message.editFilesExternally);
    }
    if (message.executeSafeCommands !== false) {
      writer.uint32(40).bool(message.executeSafeCommands);
    }
    if (message.executeAllCommands !== false) {
      writer.uint32(48).bool(message.executeAllCommands);
    }
    if (message.useBrowser !== false) {
      writer.uint32(56).bool(message.useBrowser);
    }
    if (message.useMcp !== false) {
      writer.uint32(64).bool(message.useMcp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutoApprovalSettingsRequest_Actions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutoApprovalSettingsRequest_Actions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.readFiles = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.readFilesExternally = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.editFiles = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.editFilesExternally = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.executeSafeCommands = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.executeAllCommands = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.useBrowser = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.useMcp = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutoApprovalSettingsRequest_Actions {
    return {
      readFiles: isSet(object.readFiles) ? globalThis.Boolean(object.readFiles) : false,
      readFilesExternally: isSet(object.readFilesExternally) ? globalThis.Boolean(object.readFilesExternally) : false,
      editFiles: isSet(object.editFiles) ? globalThis.Boolean(object.editFiles) : false,
      editFilesExternally: isSet(object.editFilesExternally) ? globalThis.Boolean(object.editFilesExternally) : false,
      executeSafeCommands: isSet(object.executeSafeCommands) ? globalThis.Boolean(object.executeSafeCommands) : false,
      executeAllCommands: isSet(object.executeAllCommands) ? globalThis.Boolean(object.executeAllCommands) : false,
      useBrowser: isSet(object.useBrowser) ? globalThis.Boolean(object.useBrowser) : false,
      useMcp: isSet(object.useMcp) ? globalThis.Boolean(object.useMcp) : false,
    };
  },

  toJSON(message: AutoApprovalSettingsRequest_Actions): unknown {
    const obj: any = {};
    if (message.readFiles !== false) {
      obj.readFiles = message.readFiles;
    }
    if (message.readFilesExternally !== false) {
      obj.readFilesExternally = message.readFilesExternally;
    }
    if (message.editFiles !== false) {
      obj.editFiles = message.editFiles;
    }
    if (message.editFilesExternally !== false) {
      obj.editFilesExternally = message.editFilesExternally;
    }
    if (message.executeSafeCommands !== false) {
      obj.executeSafeCommands = message.executeSafeCommands;
    }
    if (message.executeAllCommands !== false) {
      obj.executeAllCommands = message.executeAllCommands;
    }
    if (message.useBrowser !== false) {
      obj.useBrowser = message.useBrowser;
    }
    if (message.useMcp !== false) {
      obj.useMcp = message.useMcp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AutoApprovalSettingsRequest_Actions>, I>>(
    base?: I,
  ): AutoApprovalSettingsRequest_Actions {
    return AutoApprovalSettingsRequest_Actions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AutoApprovalSettingsRequest_Actions>, I>>(
    object: I,
  ): AutoApprovalSettingsRequest_Actions {
    const message = createBaseAutoApprovalSettingsRequest_Actions();
    message.readFiles = object.readFiles ?? false;
    message.readFilesExternally = object.readFilesExternally ?? false;
    message.editFiles = object.editFiles ?? false;
    message.editFilesExternally = object.editFilesExternally ?? false;
    message.executeSafeCommands = object.executeSafeCommands ?? false;
    message.executeAllCommands = object.executeAllCommands ?? false;
    message.useBrowser = object.useBrowser ?? false;
    message.useMcp = object.useMcp ?? false;
    return message;
  },
};

function createBaseTelemetrySettingRequest(): TelemetrySettingRequest {
  return { metadata: undefined, setting: 0 };
}

export const TelemetrySettingRequest: MessageFns<TelemetrySettingRequest> = {
  encode(message: TelemetrySettingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      Metadata1.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    if (message.setting !== 0) {
      writer.uint32(16).int32(message.setting);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TelemetrySettingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTelemetrySettingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata = Metadata1.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.setting = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TelemetrySettingRequest {
    return {
      metadata: isSet(object.metadata) ? Metadata1.fromJSON(object.metadata) : undefined,
      setting: isSet(object.setting) ? telemetrySettingEnumFromJSON(object.setting) : 0,
    };
  },

  toJSON(message: TelemetrySettingRequest): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = Metadata1.toJSON(message.metadata);
    }
    if (message.setting !== 0) {
      obj.setting = telemetrySettingEnumToJSON(message.setting);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TelemetrySettingRequest>, I>>(base?: I): TelemetrySettingRequest {
    return TelemetrySettingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TelemetrySettingRequest>, I>>(object: I): TelemetrySettingRequest {
    const message = createBaseTelemetrySettingRequest();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata1.fromPartial(object.metadata)
      : undefined;
    message.setting = object.setting ?? 0;
    return message;
  },
};

function createBaseBrowserSettingsUpdate(): BrowserSettingsUpdate {
  return {
    viewport: undefined,
    remoteBrowserHost: undefined,
    remoteBrowserEnabled: undefined,
    chromeExecutablePath: undefined,
    disableToolUse: undefined,
    customArgs: undefined,
  };
}

export const BrowserSettingsUpdate: MessageFns<BrowserSettingsUpdate> = {
  encode(message: BrowserSettingsUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.viewport !== undefined) {
      Viewport.encode(message.viewport, writer.uint32(10).fork()).join();
    }
    if (message.remoteBrowserHost !== undefined) {
      writer.uint32(18).string(message.remoteBrowserHost);
    }
    if (message.remoteBrowserEnabled !== undefined) {
      writer.uint32(24).bool(message.remoteBrowserEnabled);
    }
    if (message.chromeExecutablePath !== undefined) {
      writer.uint32(34).string(message.chromeExecutablePath);
    }
    if (message.disableToolUse !== undefined) {
      writer.uint32(40).bool(message.disableToolUse);
    }
    if (message.customArgs !== undefined) {
      writer.uint32(50).string(message.customArgs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BrowserSettingsUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBrowserSettingsUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.viewport = Viewport.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.remoteBrowserHost = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.remoteBrowserEnabled = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.chromeExecutablePath = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.disableToolUse = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.customArgs = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BrowserSettingsUpdate {
    return {
      viewport: isSet(object.viewport) ? Viewport.fromJSON(object.viewport) : undefined,
      remoteBrowserHost: isSet(object.remoteBrowserHost) ? globalThis.String(object.remoteBrowserHost) : undefined,
      remoteBrowserEnabled: isSet(object.remoteBrowserEnabled)
        ? globalThis.Boolean(object.remoteBrowserEnabled)
        : undefined,
      chromeExecutablePath: isSet(object.chromeExecutablePath)
        ? globalThis.String(object.chromeExecutablePath)
        : undefined,
      disableToolUse: isSet(object.disableToolUse) ? globalThis.Boolean(object.disableToolUse) : undefined,
      customArgs: isSet(object.customArgs) ? globalThis.String(object.customArgs) : undefined,
    };
  },

  toJSON(message: BrowserSettingsUpdate): unknown {
    const obj: any = {};
    if (message.viewport !== undefined) {
      obj.viewport = Viewport.toJSON(message.viewport);
    }
    if (message.remoteBrowserHost !== undefined) {
      obj.remoteBrowserHost = message.remoteBrowserHost;
    }
    if (message.remoteBrowserEnabled !== undefined) {
      obj.remoteBrowserEnabled = message.remoteBrowserEnabled;
    }
    if (message.chromeExecutablePath !== undefined) {
      obj.chromeExecutablePath = message.chromeExecutablePath;
    }
    if (message.disableToolUse !== undefined) {
      obj.disableToolUse = message.disableToolUse;
    }
    if (message.customArgs !== undefined) {
      obj.customArgs = message.customArgs;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BrowserSettingsUpdate>, I>>(base?: I): BrowserSettingsUpdate {
    return BrowserSettingsUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BrowserSettingsUpdate>, I>>(object: I): BrowserSettingsUpdate {
    const message = createBaseBrowserSettingsUpdate();
    message.viewport = (object.viewport !== undefined && object.viewport !== null)
      ? Viewport.fromPartial(object.viewport)
      : undefined;
    message.remoteBrowserHost = object.remoteBrowserHost ?? undefined;
    message.remoteBrowserEnabled = object.remoteBrowserEnabled ?? undefined;
    message.chromeExecutablePath = object.chromeExecutablePath ?? undefined;
    message.disableToolUse = object.disableToolUse ?? undefined;
    message.customArgs = object.customArgs ?? undefined;
    return message;
  },
};

function createBaseUpdateSettingsRequest(): UpdateSettingsRequest {
  return {
    metadata: undefined,
    apiConfiguration: undefined,
    telemetrySetting: undefined,
    planActSeparateModelsSetting: undefined,
    enableCheckpointsSetting: undefined,
    mcpMarketplaceEnabled: undefined,
    shellIntegrationTimeout: undefined,
    terminalReuseEnabled: undefined,
    mcpResponsesCollapsed: undefined,
    mcpDisplayMode: undefined,
    terminalOutputLineLimit: undefined,
    mode: undefined,
    preferredLanguage: undefined,
    openaiReasoningEffort: undefined,
    strictPlanModeEnabled: undefined,
    focusChainSettings: undefined,
    useAutoCondense: undefined,
    customPrompt: undefined,
    browserSettings: undefined,
    defaultTerminalProfile: undefined,
    yoloModeToggled: undefined,
  };
}

export const UpdateSettingsRequest: MessageFns<UpdateSettingsRequest> = {
  encode(message: UpdateSettingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      Metadata1.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    if (message.apiConfiguration !== undefined) {
      ApiConfiguration.encode(message.apiConfiguration, writer.uint32(18).fork()).join();
    }
    if (message.telemetrySetting !== undefined) {
      writer.uint32(26).string(message.telemetrySetting);
    }
    if (message.planActSeparateModelsSetting !== undefined) {
      writer.uint32(32).bool(message.planActSeparateModelsSetting);
    }
    if (message.enableCheckpointsSetting !== undefined) {
      writer.uint32(40).bool(message.enableCheckpointsSetting);
    }
    if (message.mcpMarketplaceEnabled !== undefined) {
      writer.uint32(48).bool(message.mcpMarketplaceEnabled);
    }
    if (message.shellIntegrationTimeout !== undefined) {
      writer.uint32(64).int32(message.shellIntegrationTimeout);
    }
    if (message.terminalReuseEnabled !== undefined) {
      writer.uint32(72).bool(message.terminalReuseEnabled);
    }
    if (message.mcpResponsesCollapsed !== undefined) {
      writer.uint32(80).bool(message.mcpResponsesCollapsed);
    }
    if (message.mcpDisplayMode !== undefined) {
      writer.uint32(88).int32(message.mcpDisplayMode);
    }
    if (message.terminalOutputLineLimit !== undefined) {
      writer.uint32(96).int32(message.terminalOutputLineLimit);
    }
    if (message.mode !== undefined) {
      writer.uint32(104).int32(message.mode);
    }
    if (message.preferredLanguage !== undefined) {
      writer.uint32(114).string(message.preferredLanguage);
    }
    if (message.openaiReasoningEffort !== undefined) {
      writer.uint32(120).int32(message.openaiReasoningEffort);
    }
    if (message.strictPlanModeEnabled !== undefined) {
      writer.uint32(128).bool(message.strictPlanModeEnabled);
    }
    if (message.focusChainSettings !== undefined) {
      FocusChainSettings.encode(message.focusChainSettings, writer.uint32(138).fork()).join();
    }
    if (message.useAutoCondense !== undefined) {
      writer.uint32(144).bool(message.useAutoCondense);
    }
    if (message.customPrompt !== undefined) {
      writer.uint32(154).string(message.customPrompt);
    }
    if (message.browserSettings !== undefined) {
      BrowserSettingsUpdate.encode(message.browserSettings, writer.uint32(162).fork()).join();
    }
    if (message.defaultTerminalProfile !== undefined) {
      writer.uint32(170).string(message.defaultTerminalProfile);
    }
    if (message.yoloModeToggled !== undefined) {
      writer.uint32(176).bool(message.yoloModeToggled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSettingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata = Metadata1.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.apiConfiguration = ApiConfiguration.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.telemetrySetting = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.planActSeparateModelsSetting = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.enableCheckpointsSetting = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.mcpMarketplaceEnabled = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.shellIntegrationTimeout = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.terminalReuseEnabled = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.mcpResponsesCollapsed = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.mcpDisplayMode = reader.int32() as any;
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.terminalOutputLineLimit = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.mode = reader.int32() as any;
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.preferredLanguage = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.openaiReasoningEffort = reader.int32() as any;
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.strictPlanModeEnabled = reader.bool();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.focusChainSettings = FocusChainSettings.decode(reader, reader.uint32());
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.useAutoCondense = reader.bool();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.customPrompt = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.browserSettings = BrowserSettingsUpdate.decode(reader, reader.uint32());
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.defaultTerminalProfile = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.yoloModeToggled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSettingsRequest {
    return {
      metadata: isSet(object.metadata) ? Metadata1.fromJSON(object.metadata) : undefined,
      apiConfiguration: isSet(object.apiConfiguration) ? ApiConfiguration.fromJSON(object.apiConfiguration) : undefined,
      telemetrySetting: isSet(object.telemetrySetting) ? globalThis.String(object.telemetrySetting) : undefined,
      planActSeparateModelsSetting: isSet(object.planActSeparateModelsSetting)
        ? globalThis.Boolean(object.planActSeparateModelsSetting)
        : undefined,
      enableCheckpointsSetting: isSet(object.enableCheckpointsSetting)
        ? globalThis.Boolean(object.enableCheckpointsSetting)
        : undefined,
      mcpMarketplaceEnabled: isSet(object.mcpMarketplaceEnabled)
        ? globalThis.Boolean(object.mcpMarketplaceEnabled)
        : undefined,
      shellIntegrationTimeout: isSet(object.shellIntegrationTimeout)
        ? globalThis.Number(object.shellIntegrationTimeout)
        : undefined,
      terminalReuseEnabled: isSet(object.terminalReuseEnabled)
        ? globalThis.Boolean(object.terminalReuseEnabled)
        : undefined,
      mcpResponsesCollapsed: isSet(object.mcpResponsesCollapsed)
        ? globalThis.Boolean(object.mcpResponsesCollapsed)
        : undefined,
      mcpDisplayMode: isSet(object.mcpDisplayMode) ? mcpDisplayModeFromJSON(object.mcpDisplayMode) : undefined,
      terminalOutputLineLimit: isSet(object.terminalOutputLineLimit)
        ? globalThis.Number(object.terminalOutputLineLimit)
        : undefined,
      mode: isSet(object.mode) ? planActModeFromJSON(object.mode) : undefined,
      preferredLanguage: isSet(object.preferredLanguage) ? globalThis.String(object.preferredLanguage) : undefined,
      openaiReasoningEffort: isSet(object.openaiReasoningEffort)
        ? openaiReasoningEffortFromJSON(object.openaiReasoningEffort)
        : undefined,
      strictPlanModeEnabled: isSet(object.strictPlanModeEnabled)
        ? globalThis.Boolean(object.strictPlanModeEnabled)
        : undefined,
      focusChainSettings: isSet(object.focusChainSettings)
        ? FocusChainSettings.fromJSON(object.focusChainSettings)
        : undefined,
      useAutoCondense: isSet(object.useAutoCondense) ? globalThis.Boolean(object.useAutoCondense) : undefined,
      customPrompt: isSet(object.customPrompt) ? globalThis.String(object.customPrompt) : undefined,
      browserSettings: isSet(object.browserSettings)
        ? BrowserSettingsUpdate.fromJSON(object.browserSettings)
        : undefined,
      defaultTerminalProfile: isSet(object.defaultTerminalProfile)
        ? globalThis.String(object.defaultTerminalProfile)
        : undefined,
      yoloModeToggled: isSet(object.yoloModeToggled) ? globalThis.Boolean(object.yoloModeToggled) : undefined,
    };
  },

  toJSON(message: UpdateSettingsRequest): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = Metadata1.toJSON(message.metadata);
    }
    if (message.apiConfiguration !== undefined) {
      obj.apiConfiguration = ApiConfiguration.toJSON(message.apiConfiguration);
    }
    if (message.telemetrySetting !== undefined) {
      obj.telemetrySetting = message.telemetrySetting;
    }
    if (message.planActSeparateModelsSetting !== undefined) {
      obj.planActSeparateModelsSetting = message.planActSeparateModelsSetting;
    }
    if (message.enableCheckpointsSetting !== undefined) {
      obj.enableCheckpointsSetting = message.enableCheckpointsSetting;
    }
    if (message.mcpMarketplaceEnabled !== undefined) {
      obj.mcpMarketplaceEnabled = message.mcpMarketplaceEnabled;
    }
    if (message.shellIntegrationTimeout !== undefined) {
      obj.shellIntegrationTimeout = Math.round(message.shellIntegrationTimeout);
    }
    if (message.terminalReuseEnabled !== undefined) {
      obj.terminalReuseEnabled = message.terminalReuseEnabled;
    }
    if (message.mcpResponsesCollapsed !== undefined) {
      obj.mcpResponsesCollapsed = message.mcpResponsesCollapsed;
    }
    if (message.mcpDisplayMode !== undefined) {
      obj.mcpDisplayMode = mcpDisplayModeToJSON(message.mcpDisplayMode);
    }
    if (message.terminalOutputLineLimit !== undefined) {
      obj.terminalOutputLineLimit = Math.round(message.terminalOutputLineLimit);
    }
    if (message.mode !== undefined) {
      obj.mode = planActModeToJSON(message.mode);
    }
    if (message.preferredLanguage !== undefined) {
      obj.preferredLanguage = message.preferredLanguage;
    }
    if (message.openaiReasoningEffort !== undefined) {
      obj.openaiReasoningEffort = openaiReasoningEffortToJSON(message.openaiReasoningEffort);
    }
    if (message.strictPlanModeEnabled !== undefined) {
      obj.strictPlanModeEnabled = message.strictPlanModeEnabled;
    }
    if (message.focusChainSettings !== undefined) {
      obj.focusChainSettings = FocusChainSettings.toJSON(message.focusChainSettings);
    }
    if (message.useAutoCondense !== undefined) {
      obj.useAutoCondense = message.useAutoCondense;
    }
    if (message.customPrompt !== undefined) {
      obj.customPrompt = message.customPrompt;
    }
    if (message.browserSettings !== undefined) {
      obj.browserSettings = BrowserSettingsUpdate.toJSON(message.browserSettings);
    }
    if (message.defaultTerminalProfile !== undefined) {
      obj.defaultTerminalProfile = message.defaultTerminalProfile;
    }
    if (message.yoloModeToggled !== undefined) {
      obj.yoloModeToggled = message.yoloModeToggled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSettingsRequest>, I>>(base?: I): UpdateSettingsRequest {
    return UpdateSettingsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSettingsRequest>, I>>(object: I): UpdateSettingsRequest {
    const message = createBaseUpdateSettingsRequest();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata1.fromPartial(object.metadata)
      : undefined;
    message.apiConfiguration = (object.apiConfiguration !== undefined && object.apiConfiguration !== null)
      ? ApiConfiguration.fromPartial(object.apiConfiguration)
      : undefined;
    message.telemetrySetting = object.telemetrySetting ?? undefined;
    message.planActSeparateModelsSetting = object.planActSeparateModelsSetting ?? undefined;
    message.enableCheckpointsSetting = object.enableCheckpointsSetting ?? undefined;
    message.mcpMarketplaceEnabled = object.mcpMarketplaceEnabled ?? undefined;
    message.shellIntegrationTimeout = object.shellIntegrationTimeout ?? undefined;
    message.terminalReuseEnabled = object.terminalReuseEnabled ?? undefined;
    message.mcpResponsesCollapsed = object.mcpResponsesCollapsed ?? undefined;
    message.mcpDisplayMode = object.mcpDisplayMode ?? undefined;
    message.terminalOutputLineLimit = object.terminalOutputLineLimit ?? undefined;
    message.mode = object.mode ?? undefined;
    message.preferredLanguage = object.preferredLanguage ?? undefined;
    message.openaiReasoningEffort = object.openaiReasoningEffort ?? undefined;
    message.strictPlanModeEnabled = object.strictPlanModeEnabled ?? undefined;
    message.focusChainSettings = (object.focusChainSettings !== undefined && object.focusChainSettings !== null)
      ? FocusChainSettings.fromPartial(object.focusChainSettings)
      : undefined;
    message.useAutoCondense = object.useAutoCondense ?? undefined;
    message.customPrompt = object.customPrompt ?? undefined;
    message.browserSettings = (object.browserSettings !== undefined && object.browserSettings !== null)
      ? BrowserSettingsUpdate.fromPartial(object.browserSettings)
      : undefined;
    message.defaultTerminalProfile = object.defaultTerminalProfile ?? undefined;
    message.yoloModeToggled = object.yoloModeToggled ?? undefined;
    return message;
  },
};

function createBaseApiConfiguration(): ApiConfiguration {
  return {
    apiKey: undefined,
    clineApiKey: undefined,
    ulid: undefined,
    liteLlmBaseUrl: undefined,
    liteLlmApiKey: undefined,
    liteLlmUsePromptCache: undefined,
    openAiHeaders: {},
    anthropicBaseUrl: undefined,
    openRouterApiKey: undefined,
    openRouterProviderSorting: undefined,
    awsAccessKey: undefined,
    awsSecretKey: undefined,
    awsSessionToken: undefined,
    awsRegion: undefined,
    awsUseCrossRegionInference: undefined,
    awsBedrockUsePromptCache: undefined,
    awsUseProfile: undefined,
    awsProfile: undefined,
    awsBedrockEndpoint: undefined,
    claudeCodePath: undefined,
    vertexProjectId: undefined,
    vertexRegion: undefined,
    openAiBaseUrl: undefined,
    openAiApiKey: undefined,
    ollamaBaseUrl: undefined,
    ollamaApiOptionsCtxNum: undefined,
    lmStudioBaseUrl: undefined,
    geminiApiKey: undefined,
    geminiBaseUrl: undefined,
    openAiNativeApiKey: undefined,
    deepSeekApiKey: undefined,
    requestyApiKey: undefined,
    requestyBaseUrl: undefined,
    togetherApiKey: undefined,
    fireworksApiKey: undefined,
    fireworksModelMaxCompletionTokens: undefined,
    fireworksModelMaxTokens: undefined,
    qwenApiKey: undefined,
    doubaoApiKey: undefined,
    mistralApiKey: undefined,
    azureApiVersion: undefined,
    qwenApiLine: undefined,
    nebiusApiKey: undefined,
    asksageApiUrl: undefined,
    asksageApiKey: undefined,
    xaiApiKey: undefined,
    sambanovaApiKey: undefined,
    cerebrasApiKey: undefined,
    requestTimeoutMs: undefined,
    sapAiCoreClientId: undefined,
    sapAiCoreClientSecret: undefined,
    sapAiResourceGroup: undefined,
    sapAiCoreTokenUrl: undefined,
    sapAiCoreBaseUrl: undefined,
    moonshotApiKey: undefined,
    moonshotApiLine: undefined,
    huaweiCloudMaasApiKey: undefined,
    ollamaApiKey: undefined,
    zaiApiKey: undefined,
    zaiApiLine: undefined,
    lmStudioMaxTokens: undefined,
    vercelAiGatewayApiKey: undefined,
    qwenCodeOauthPath: undefined,
    difyApiKey: undefined,
    difyBaseUrl: undefined,
    ocaBaseUrl: undefined,
    ocaApiKey: undefined,
    ocaRefreshToken: undefined,
    planModeApiProvider: undefined,
    planModeApiModelId: undefined,
    planModeThinkingBudgetTokens: undefined,
    planModeReasoningEffort: undefined,
    planModeVsCodeLmModelSelector: undefined,
    planModeAwsBedrockCustomSelected: undefined,
    planModeAwsBedrockCustomModelBaseId: undefined,
    planModeOpenRouterModelId: undefined,
    planModeOpenRouterModelInfo: undefined,
    planModeOpenAiModelId: undefined,
    planModeOpenAiModelInfo: undefined,
    planModeOllamaModelId: undefined,
    planModeLmStudioModelId: undefined,
    planModeLiteLlmModelId: undefined,
    planModeLiteLlmModelInfo: undefined,
    planModeRequestyModelId: undefined,
    planModeRequestyModelInfo: undefined,
    planModeTogetherModelId: undefined,
    planModeFireworksModelId: undefined,
    planModeSapAiCoreModelId: undefined,
    planModeHuaweiCloudMaasModelId: undefined,
    planModeHuaweiCloudMaasModelInfo: undefined,
    planModeVercelAiGatewayModelId: undefined,
    planModeVercelAiGatewayModelInfo: undefined,
    planModeOcaModelId: undefined,
    planModeOcaModelInfo: undefined,
    actModeApiProvider: undefined,
    actModeApiModelId: undefined,
    actModeThinkingBudgetTokens: undefined,
    actModeReasoningEffort: undefined,
    actModeVsCodeLmModelSelector: undefined,
    actModeAwsBedrockCustomSelected: undefined,
    actModeAwsBedrockCustomModelBaseId: undefined,
    actModeOpenRouterModelId: undefined,
    actModeOpenRouterModelInfo: undefined,
    actModeOpenAiModelId: undefined,
    actModeOpenAiModelInfo: undefined,
    actModeOllamaModelId: undefined,
    actModeLmStudioModelId: undefined,
    actModeLiteLlmModelId: undefined,
    actModeLiteLlmModelInfo: undefined,
    actModeRequestyModelId: undefined,
    actModeRequestyModelInfo: undefined,
    actModeTogetherModelId: undefined,
    actModeFireworksModelId: undefined,
    actModeSapAiCoreModelId: undefined,
    actModeHuaweiCloudMaasModelId: undefined,
    actModeHuaweiCloudMaasModelInfo: undefined,
    actModeVercelAiGatewayModelId: undefined,
    actModeVercelAiGatewayModelInfo: undefined,
    actModeOcaModelId: undefined,
    actModeOcaModelInfo: undefined,
    awsAuthentication: undefined,
    awsBedrockApiKey: undefined,
    clineAccountId: undefined,
  };
}

export const ApiConfiguration: MessageFns<ApiConfiguration> = {
  encode(message: ApiConfiguration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.apiKey !== undefined) {
      writer.uint32(10).string(message.apiKey);
    }
    if (message.clineApiKey !== undefined) {
      writer.uint32(18).string(message.clineApiKey);
    }
    if (message.ulid !== undefined) {
      writer.uint32(26).string(message.ulid);
    }
    if (message.liteLlmBaseUrl !== undefined) {
      writer.uint32(34).string(message.liteLlmBaseUrl);
    }
    if (message.liteLlmApiKey !== undefined) {
      writer.uint32(42).string(message.liteLlmApiKey);
    }
    if (message.liteLlmUsePromptCache !== undefined) {
      writer.uint32(48).bool(message.liteLlmUsePromptCache);
    }
    Object.entries(message.openAiHeaders).forEach(([key, value]) => {
      ApiConfiguration_OpenAiHeadersEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    if (message.anthropicBaseUrl !== undefined) {
      writer.uint32(66).string(message.anthropicBaseUrl);
    }
    if (message.openRouterApiKey !== undefined) {
      writer.uint32(74).string(message.openRouterApiKey);
    }
    if (message.openRouterProviderSorting !== undefined) {
      writer.uint32(82).string(message.openRouterProviderSorting);
    }
    if (message.awsAccessKey !== undefined) {
      writer.uint32(90).string(message.awsAccessKey);
    }
    if (message.awsSecretKey !== undefined) {
      writer.uint32(98).string(message.awsSecretKey);
    }
    if (message.awsSessionToken !== undefined) {
      writer.uint32(106).string(message.awsSessionToken);
    }
    if (message.awsRegion !== undefined) {
      writer.uint32(114).string(message.awsRegion);
    }
    if (message.awsUseCrossRegionInference !== undefined) {
      writer.uint32(120).bool(message.awsUseCrossRegionInference);
    }
    if (message.awsBedrockUsePromptCache !== undefined) {
      writer.uint32(128).bool(message.awsBedrockUsePromptCache);
    }
    if (message.awsUseProfile !== undefined) {
      writer.uint32(136).bool(message.awsUseProfile);
    }
    if (message.awsProfile !== undefined) {
      writer.uint32(146).string(message.awsProfile);
    }
    if (message.awsBedrockEndpoint !== undefined) {
      writer.uint32(154).string(message.awsBedrockEndpoint);
    }
    if (message.claudeCodePath !== undefined) {
      writer.uint32(162).string(message.claudeCodePath);
    }
    if (message.vertexProjectId !== undefined) {
      writer.uint32(170).string(message.vertexProjectId);
    }
    if (message.vertexRegion !== undefined) {
      writer.uint32(178).string(message.vertexRegion);
    }
    if (message.openAiBaseUrl !== undefined) {
      writer.uint32(186).string(message.openAiBaseUrl);
    }
    if (message.openAiApiKey !== undefined) {
      writer.uint32(194).string(message.openAiApiKey);
    }
    if (message.ollamaBaseUrl !== undefined) {
      writer.uint32(202).string(message.ollamaBaseUrl);
    }
    if (message.ollamaApiOptionsCtxNum !== undefined) {
      writer.uint32(210).string(message.ollamaApiOptionsCtxNum);
    }
    if (message.lmStudioBaseUrl !== undefined) {
      writer.uint32(218).string(message.lmStudioBaseUrl);
    }
    if (message.geminiApiKey !== undefined) {
      writer.uint32(226).string(message.geminiApiKey);
    }
    if (message.geminiBaseUrl !== undefined) {
      writer.uint32(234).string(message.geminiBaseUrl);
    }
    if (message.openAiNativeApiKey !== undefined) {
      writer.uint32(242).string(message.openAiNativeApiKey);
    }
    if (message.deepSeekApiKey !== undefined) {
      writer.uint32(250).string(message.deepSeekApiKey);
    }
    if (message.requestyApiKey !== undefined) {
      writer.uint32(258).string(message.requestyApiKey);
    }
    if (message.requestyBaseUrl !== undefined) {
      writer.uint32(266).string(message.requestyBaseUrl);
    }
    if (message.togetherApiKey !== undefined) {
      writer.uint32(274).string(message.togetherApiKey);
    }
    if (message.fireworksApiKey !== undefined) {
      writer.uint32(282).string(message.fireworksApiKey);
    }
    if (message.fireworksModelMaxCompletionTokens !== undefined) {
      writer.uint32(288).int32(message.fireworksModelMaxCompletionTokens);
    }
    if (message.fireworksModelMaxTokens !== undefined) {
      writer.uint32(296).int32(message.fireworksModelMaxTokens);
    }
    if (message.qwenApiKey !== undefined) {
      writer.uint32(306).string(message.qwenApiKey);
    }
    if (message.doubaoApiKey !== undefined) {
      writer.uint32(314).string(message.doubaoApiKey);
    }
    if (message.mistralApiKey !== undefined) {
      writer.uint32(322).string(message.mistralApiKey);
    }
    if (message.azureApiVersion !== undefined) {
      writer.uint32(330).string(message.azureApiVersion);
    }
    if (message.qwenApiLine !== undefined) {
      writer.uint32(338).string(message.qwenApiLine);
    }
    if (message.nebiusApiKey !== undefined) {
      writer.uint32(346).string(message.nebiusApiKey);
    }
    if (message.asksageApiUrl !== undefined) {
      writer.uint32(354).string(message.asksageApiUrl);
    }
    if (message.asksageApiKey !== undefined) {
      writer.uint32(362).string(message.asksageApiKey);
    }
    if (message.xaiApiKey !== undefined) {
      writer.uint32(370).string(message.xaiApiKey);
    }
    if (message.sambanovaApiKey !== undefined) {
      writer.uint32(378).string(message.sambanovaApiKey);
    }
    if (message.cerebrasApiKey !== undefined) {
      writer.uint32(386).string(message.cerebrasApiKey);
    }
    if (message.requestTimeoutMs !== undefined) {
      writer.uint32(392).int32(message.requestTimeoutMs);
    }
    if (message.sapAiCoreClientId !== undefined) {
      writer.uint32(402).string(message.sapAiCoreClientId);
    }
    if (message.sapAiCoreClientSecret !== undefined) {
      writer.uint32(410).string(message.sapAiCoreClientSecret);
    }
    if (message.sapAiResourceGroup !== undefined) {
      writer.uint32(418).string(message.sapAiResourceGroup);
    }
    if (message.sapAiCoreTokenUrl !== undefined) {
      writer.uint32(426).string(message.sapAiCoreTokenUrl);
    }
    if (message.sapAiCoreBaseUrl !== undefined) {
      writer.uint32(434).string(message.sapAiCoreBaseUrl);
    }
    if (message.moonshotApiKey !== undefined) {
      writer.uint32(442).string(message.moonshotApiKey);
    }
    if (message.moonshotApiLine !== undefined) {
      writer.uint32(450).string(message.moonshotApiLine);
    }
    if (message.huaweiCloudMaasApiKey !== undefined) {
      writer.uint32(458).string(message.huaweiCloudMaasApiKey);
    }
    if (message.ollamaApiKey !== undefined) {
      writer.uint32(466).string(message.ollamaApiKey);
    }
    if (message.zaiApiKey !== undefined) {
      writer.uint32(474).string(message.zaiApiKey);
    }
    if (message.zaiApiLine !== undefined) {
      writer.uint32(482).string(message.zaiApiLine);
    }
    if (message.lmStudioMaxTokens !== undefined) {
      writer.uint32(490).string(message.lmStudioMaxTokens);
    }
    if (message.vercelAiGatewayApiKey !== undefined) {
      writer.uint32(498).string(message.vercelAiGatewayApiKey);
    }
    if (message.qwenCodeOauthPath !== undefined) {
      writer.uint32(506).string(message.qwenCodeOauthPath);
    }
    if (message.difyApiKey !== undefined) {
      writer.uint32(514).string(message.difyApiKey);
    }
    if (message.difyBaseUrl !== undefined) {
      writer.uint32(522).string(message.difyBaseUrl);
    }
    if (message.ocaBaseUrl !== undefined) {
      writer.uint32(530).string(message.ocaBaseUrl);
    }
    if (message.ocaApiKey !== undefined) {
      writer.uint32(538).string(message.ocaApiKey);
    }
    if (message.ocaRefreshToken !== undefined) {
      writer.uint32(546).string(message.ocaRefreshToken);
    }
    if (message.planModeApiProvider !== undefined) {
      writer.uint32(800).int32(message.planModeApiProvider);
    }
    if (message.planModeApiModelId !== undefined) {
      writer.uint32(810).string(message.planModeApiModelId);
    }
    if (message.planModeThinkingBudgetTokens !== undefined) {
      writer.uint32(816).int32(message.planModeThinkingBudgetTokens);
    }
    if (message.planModeReasoningEffort !== undefined) {
      writer.uint32(826).string(message.planModeReasoningEffort);
    }
    if (message.planModeVsCodeLmModelSelector !== undefined) {
      LanguageModelChatSelector.encode(message.planModeVsCodeLmModelSelector, writer.uint32(834).fork()).join();
    }
    if (message.planModeAwsBedrockCustomSelected !== undefined) {
      writer.uint32(840).bool(message.planModeAwsBedrockCustomSelected);
    }
    if (message.planModeAwsBedrockCustomModelBaseId !== undefined) {
      writer.uint32(850).string(message.planModeAwsBedrockCustomModelBaseId);
    }
    if (message.planModeOpenRouterModelId !== undefined) {
      writer.uint32(858).string(message.planModeOpenRouterModelId);
    }
    if (message.planModeOpenRouterModelInfo !== undefined) {
      OpenRouterModelInfo.encode(message.planModeOpenRouterModelInfo, writer.uint32(866).fork()).join();
    }
    if (message.planModeOpenAiModelId !== undefined) {
      writer.uint32(874).string(message.planModeOpenAiModelId);
    }
    if (message.planModeOpenAiModelInfo !== undefined) {
      OpenAiCompatibleModelInfo.encode(message.planModeOpenAiModelInfo, writer.uint32(882).fork()).join();
    }
    if (message.planModeOllamaModelId !== undefined) {
      writer.uint32(890).string(message.planModeOllamaModelId);
    }
    if (message.planModeLmStudioModelId !== undefined) {
      writer.uint32(898).string(message.planModeLmStudioModelId);
    }
    if (message.planModeLiteLlmModelId !== undefined) {
      writer.uint32(906).string(message.planModeLiteLlmModelId);
    }
    if (message.planModeLiteLlmModelInfo !== undefined) {
      LiteLLMModelInfo.encode(message.planModeLiteLlmModelInfo, writer.uint32(914).fork()).join();
    }
    if (message.planModeRequestyModelId !== undefined) {
      writer.uint32(922).string(message.planModeRequestyModelId);
    }
    if (message.planModeRequestyModelInfo !== undefined) {
      OpenRouterModelInfo.encode(message.planModeRequestyModelInfo, writer.uint32(930).fork()).join();
    }
    if (message.planModeTogetherModelId !== undefined) {
      writer.uint32(938).string(message.planModeTogetherModelId);
    }
    if (message.planModeFireworksModelId !== undefined) {
      writer.uint32(946).string(message.planModeFireworksModelId);
    }
    if (message.planModeSapAiCoreModelId !== undefined) {
      writer.uint32(954).string(message.planModeSapAiCoreModelId);
    }
    if (message.planModeHuaweiCloudMaasModelId !== undefined) {
      writer.uint32(962).string(message.planModeHuaweiCloudMaasModelId);
    }
    if (message.planModeHuaweiCloudMaasModelInfo !== undefined) {
      OpenRouterModelInfo.encode(message.planModeHuaweiCloudMaasModelInfo, writer.uint32(970).fork()).join();
    }
    if (message.planModeVercelAiGatewayModelId !== undefined) {
      writer.uint32(978).string(message.planModeVercelAiGatewayModelId);
    }
    if (message.planModeVercelAiGatewayModelInfo !== undefined) {
      OpenRouterModelInfo.encode(message.planModeVercelAiGatewayModelInfo, writer.uint32(986).fork()).join();
    }
    if (message.planModeOcaModelId !== undefined) {
      writer.uint32(994).string(message.planModeOcaModelId);
    }
    if (message.planModeOcaModelInfo !== undefined) {
      OcaModelInfo.encode(message.planModeOcaModelInfo, writer.uint32(1002).fork()).join();
    }
    if (message.actModeApiProvider !== undefined) {
      writer.uint32(1600).int32(message.actModeApiProvider);
    }
    if (message.actModeApiModelId !== undefined) {
      writer.uint32(1610).string(message.actModeApiModelId);
    }
    if (message.actModeThinkingBudgetTokens !== undefined) {
      writer.uint32(1616).int32(message.actModeThinkingBudgetTokens);
    }
    if (message.actModeReasoningEffort !== undefined) {
      writer.uint32(1626).string(message.actModeReasoningEffort);
    }
    if (message.actModeVsCodeLmModelSelector !== undefined) {
      LanguageModelChatSelector.encode(message.actModeVsCodeLmModelSelector, writer.uint32(1634).fork()).join();
    }
    if (message.actModeAwsBedrockCustomSelected !== undefined) {
      writer.uint32(1640).bool(message.actModeAwsBedrockCustomSelected);
    }
    if (message.actModeAwsBedrockCustomModelBaseId !== undefined) {
      writer.uint32(1650).string(message.actModeAwsBedrockCustomModelBaseId);
    }
    if (message.actModeOpenRouterModelId !== undefined) {
      writer.uint32(1658).string(message.actModeOpenRouterModelId);
    }
    if (message.actModeOpenRouterModelInfo !== undefined) {
      OpenRouterModelInfo.encode(message.actModeOpenRouterModelInfo, writer.uint32(1666).fork()).join();
    }
    if (message.actModeOpenAiModelId !== undefined) {
      writer.uint32(1674).string(message.actModeOpenAiModelId);
    }
    if (message.actModeOpenAiModelInfo !== undefined) {
      OpenAiCompatibleModelInfo.encode(message.actModeOpenAiModelInfo, writer.uint32(1682).fork()).join();
    }
    if (message.actModeOllamaModelId !== undefined) {
      writer.uint32(1690).string(message.actModeOllamaModelId);
    }
    if (message.actModeLmStudioModelId !== undefined) {
      writer.uint32(1698).string(message.actModeLmStudioModelId);
    }
    if (message.actModeLiteLlmModelId !== undefined) {
      writer.uint32(1706).string(message.actModeLiteLlmModelId);
    }
    if (message.actModeLiteLlmModelInfo !== undefined) {
      LiteLLMModelInfo.encode(message.actModeLiteLlmModelInfo, writer.uint32(1714).fork()).join();
    }
    if (message.actModeRequestyModelId !== undefined) {
      writer.uint32(1722).string(message.actModeRequestyModelId);
    }
    if (message.actModeRequestyModelInfo !== undefined) {
      OpenRouterModelInfo.encode(message.actModeRequestyModelInfo, writer.uint32(1730).fork()).join();
    }
    if (message.actModeTogetherModelId !== undefined) {
      writer.uint32(1738).string(message.actModeTogetherModelId);
    }
    if (message.actModeFireworksModelId !== undefined) {
      writer.uint32(1746).string(message.actModeFireworksModelId);
    }
    if (message.actModeSapAiCoreModelId !== undefined) {
      writer.uint32(1754).string(message.actModeSapAiCoreModelId);
    }
    if (message.actModeHuaweiCloudMaasModelId !== undefined) {
      writer.uint32(1762).string(message.actModeHuaweiCloudMaasModelId);
    }
    if (message.actModeHuaweiCloudMaasModelInfo !== undefined) {
      OpenRouterModelInfo.encode(message.actModeHuaweiCloudMaasModelInfo, writer.uint32(1770).fork()).join();
    }
    if (message.actModeVercelAiGatewayModelId !== undefined) {
      writer.uint32(1778).string(message.actModeVercelAiGatewayModelId);
    }
    if (message.actModeVercelAiGatewayModelInfo !== undefined) {
      OpenRouterModelInfo.encode(message.actModeVercelAiGatewayModelInfo, writer.uint32(1786).fork()).join();
    }
    if (message.actModeOcaModelId !== undefined) {
      writer.uint32(1794).string(message.actModeOcaModelId);
    }
    if (message.actModeOcaModelInfo !== undefined) {
      OcaModelInfo.encode(message.actModeOcaModelInfo, writer.uint32(1802).fork()).join();
    }
    if (message.awsAuthentication !== undefined) {
      writer.uint32(2410).string(message.awsAuthentication);
    }
    if (message.awsBedrockApiKey !== undefined) {
      writer.uint32(2418).string(message.awsBedrockApiKey);
    }
    if (message.clineAccountId !== undefined) {
      writer.uint32(2426).string(message.clineAccountId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiConfiguration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiConfiguration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.apiKey = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.clineApiKey = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ulid = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.liteLlmBaseUrl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.liteLlmApiKey = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.liteLlmUsePromptCache = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          const entry7 = ApiConfiguration_OpenAiHeadersEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.openAiHeaders[entry7.key] = entry7.value;
          }
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.anthropicBaseUrl = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.openRouterApiKey = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.openRouterProviderSorting = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.awsAccessKey = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.awsSecretKey = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.awsSessionToken = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.awsRegion = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.awsUseCrossRegionInference = reader.bool();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.awsBedrockUsePromptCache = reader.bool();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.awsUseProfile = reader.bool();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.awsProfile = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.awsBedrockEndpoint = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.claudeCodePath = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.vertexProjectId = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.vertexRegion = reader.string();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.openAiBaseUrl = reader.string();
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.openAiApiKey = reader.string();
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.ollamaBaseUrl = reader.string();
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.ollamaApiOptionsCtxNum = reader.string();
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.lmStudioBaseUrl = reader.string();
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.geminiApiKey = reader.string();
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.geminiBaseUrl = reader.string();
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.openAiNativeApiKey = reader.string();
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.deepSeekApiKey = reader.string();
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.requestyApiKey = reader.string();
          continue;
        }
        case 33: {
          if (tag !== 266) {
            break;
          }

          message.requestyBaseUrl = reader.string();
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.togetherApiKey = reader.string();
          continue;
        }
        case 35: {
          if (tag !== 282) {
            break;
          }

          message.fireworksApiKey = reader.string();
          continue;
        }
        case 36: {
          if (tag !== 288) {
            break;
          }

          message.fireworksModelMaxCompletionTokens = reader.int32();
          continue;
        }
        case 37: {
          if (tag !== 296) {
            break;
          }

          message.fireworksModelMaxTokens = reader.int32();
          continue;
        }
        case 38: {
          if (tag !== 306) {
            break;
          }

          message.qwenApiKey = reader.string();
          continue;
        }
        case 39: {
          if (tag !== 314) {
            break;
          }

          message.doubaoApiKey = reader.string();
          continue;
        }
        case 40: {
          if (tag !== 322) {
            break;
          }

          message.mistralApiKey = reader.string();
          continue;
        }
        case 41: {
          if (tag !== 330) {
            break;
          }

          message.azureApiVersion = reader.string();
          continue;
        }
        case 42: {
          if (tag !== 338) {
            break;
          }

          message.qwenApiLine = reader.string();
          continue;
        }
        case 43: {
          if (tag !== 346) {
            break;
          }

          message.nebiusApiKey = reader.string();
          continue;
        }
        case 44: {
          if (tag !== 354) {
            break;
          }

          message.asksageApiUrl = reader.string();
          continue;
        }
        case 45: {
          if (tag !== 362) {
            break;
          }

          message.asksageApiKey = reader.string();
          continue;
        }
        case 46: {
          if (tag !== 370) {
            break;
          }

          message.xaiApiKey = reader.string();
          continue;
        }
        case 47: {
          if (tag !== 378) {
            break;
          }

          message.sambanovaApiKey = reader.string();
          continue;
        }
        case 48: {
          if (tag !== 386) {
            break;
          }

          message.cerebrasApiKey = reader.string();
          continue;
        }
        case 49: {
          if (tag !== 392) {
            break;
          }

          message.requestTimeoutMs = reader.int32();
          continue;
        }
        case 50: {
          if (tag !== 402) {
            break;
          }

          message.sapAiCoreClientId = reader.string();
          continue;
        }
        case 51: {
          if (tag !== 410) {
            break;
          }

          message.sapAiCoreClientSecret = reader.string();
          continue;
        }
        case 52: {
          if (tag !== 418) {
            break;
          }

          message.sapAiResourceGroup = reader.string();
          continue;
        }
        case 53: {
          if (tag !== 426) {
            break;
          }

          message.sapAiCoreTokenUrl = reader.string();
          continue;
        }
        case 54: {
          if (tag !== 434) {
            break;
          }

          message.sapAiCoreBaseUrl = reader.string();
          continue;
        }
        case 55: {
          if (tag !== 442) {
            break;
          }

          message.moonshotApiKey = reader.string();
          continue;
        }
        case 56: {
          if (tag !== 450) {
            break;
          }

          message.moonshotApiLine = reader.string();
          continue;
        }
        case 57: {
          if (tag !== 458) {
            break;
          }

          message.huaweiCloudMaasApiKey = reader.string();
          continue;
        }
        case 58: {
          if (tag !== 466) {
            break;
          }

          message.ollamaApiKey = reader.string();
          continue;
        }
        case 59: {
          if (tag !== 474) {
            break;
          }

          message.zaiApiKey = reader.string();
          continue;
        }
        case 60: {
          if (tag !== 482) {
            break;
          }

          message.zaiApiLine = reader.string();
          continue;
        }
        case 61: {
          if (tag !== 490) {
            break;
          }

          message.lmStudioMaxTokens = reader.string();
          continue;
        }
        case 62: {
          if (tag !== 498) {
            break;
          }

          message.vercelAiGatewayApiKey = reader.string();
          continue;
        }
        case 63: {
          if (tag !== 506) {
            break;
          }

          message.qwenCodeOauthPath = reader.string();
          continue;
        }
        case 64: {
          if (tag !== 514) {
            break;
          }

          message.difyApiKey = reader.string();
          continue;
        }
        case 65: {
          if (tag !== 522) {
            break;
          }

          message.difyBaseUrl = reader.string();
          continue;
        }
        case 66: {
          if (tag !== 530) {
            break;
          }

          message.ocaBaseUrl = reader.string();
          continue;
        }
        case 67: {
          if (tag !== 538) {
            break;
          }

          message.ocaApiKey = reader.string();
          continue;
        }
        case 68: {
          if (tag !== 546) {
            break;
          }

          message.ocaRefreshToken = reader.string();
          continue;
        }
        case 100: {
          if (tag !== 800) {
            break;
          }

          message.planModeApiProvider = reader.int32() as any;
          continue;
        }
        case 101: {
          if (tag !== 810) {
            break;
          }

          message.planModeApiModelId = reader.string();
          continue;
        }
        case 102: {
          if (tag !== 816) {
            break;
          }

          message.planModeThinkingBudgetTokens = reader.int32();
          continue;
        }
        case 103: {
          if (tag !== 826) {
            break;
          }

          message.planModeReasoningEffort = reader.string();
          continue;
        }
        case 104: {
          if (tag !== 834) {
            break;
          }

          message.planModeVsCodeLmModelSelector = LanguageModelChatSelector.decode(reader, reader.uint32());
          continue;
        }
        case 105: {
          if (tag !== 840) {
            break;
          }

          message.planModeAwsBedrockCustomSelected = reader.bool();
          continue;
        }
        case 106: {
          if (tag !== 850) {
            break;
          }

          message.planModeAwsBedrockCustomModelBaseId = reader.string();
          continue;
        }
        case 107: {
          if (tag !== 858) {
            break;
          }

          message.planModeOpenRouterModelId = reader.string();
          continue;
        }
        case 108: {
          if (tag !== 866) {
            break;
          }

          message.planModeOpenRouterModelInfo = OpenRouterModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 109: {
          if (tag !== 874) {
            break;
          }

          message.planModeOpenAiModelId = reader.string();
          continue;
        }
        case 110: {
          if (tag !== 882) {
            break;
          }

          message.planModeOpenAiModelInfo = OpenAiCompatibleModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 111: {
          if (tag !== 890) {
            break;
          }

          message.planModeOllamaModelId = reader.string();
          continue;
        }
        case 112: {
          if (tag !== 898) {
            break;
          }

          message.planModeLmStudioModelId = reader.string();
          continue;
        }
        case 113: {
          if (tag !== 906) {
            break;
          }

          message.planModeLiteLlmModelId = reader.string();
          continue;
        }
        case 114: {
          if (tag !== 914) {
            break;
          }

          message.planModeLiteLlmModelInfo = LiteLLMModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 115: {
          if (tag !== 922) {
            break;
          }

          message.planModeRequestyModelId = reader.string();
          continue;
        }
        case 116: {
          if (tag !== 930) {
            break;
          }

          message.planModeRequestyModelInfo = OpenRouterModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 117: {
          if (tag !== 938) {
            break;
          }

          message.planModeTogetherModelId = reader.string();
          continue;
        }
        case 118: {
          if (tag !== 946) {
            break;
          }

          message.planModeFireworksModelId = reader.string();
          continue;
        }
        case 119: {
          if (tag !== 954) {
            break;
          }

          message.planModeSapAiCoreModelId = reader.string();
          continue;
        }
        case 120: {
          if (tag !== 962) {
            break;
          }

          message.planModeHuaweiCloudMaasModelId = reader.string();
          continue;
        }
        case 121: {
          if (tag !== 970) {
            break;
          }

          message.planModeHuaweiCloudMaasModelInfo = OpenRouterModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 122: {
          if (tag !== 978) {
            break;
          }

          message.planModeVercelAiGatewayModelId = reader.string();
          continue;
        }
        case 123: {
          if (tag !== 986) {
            break;
          }

          message.planModeVercelAiGatewayModelInfo = OpenRouterModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 124: {
          if (tag !== 994) {
            break;
          }

          message.planModeOcaModelId = reader.string();
          continue;
        }
        case 125: {
          if (tag !== 1002) {
            break;
          }

          message.planModeOcaModelInfo = OcaModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 200: {
          if (tag !== 1600) {
            break;
          }

          message.actModeApiProvider = reader.int32() as any;
          continue;
        }
        case 201: {
          if (tag !== 1610) {
            break;
          }

          message.actModeApiModelId = reader.string();
          continue;
        }
        case 202: {
          if (tag !== 1616) {
            break;
          }

          message.actModeThinkingBudgetTokens = reader.int32();
          continue;
        }
        case 203: {
          if (tag !== 1626) {
            break;
          }

          message.actModeReasoningEffort = reader.string();
          continue;
        }
        case 204: {
          if (tag !== 1634) {
            break;
          }

          message.actModeVsCodeLmModelSelector = LanguageModelChatSelector.decode(reader, reader.uint32());
          continue;
        }
        case 205: {
          if (tag !== 1640) {
            break;
          }

          message.actModeAwsBedrockCustomSelected = reader.bool();
          continue;
        }
        case 206: {
          if (tag !== 1650) {
            break;
          }

          message.actModeAwsBedrockCustomModelBaseId = reader.string();
          continue;
        }
        case 207: {
          if (tag !== 1658) {
            break;
          }

          message.actModeOpenRouterModelId = reader.string();
          continue;
        }
        case 208: {
          if (tag !== 1666) {
            break;
          }

          message.actModeOpenRouterModelInfo = OpenRouterModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 209: {
          if (tag !== 1674) {
            break;
          }

          message.actModeOpenAiModelId = reader.string();
          continue;
        }
        case 210: {
          if (tag !== 1682) {
            break;
          }

          message.actModeOpenAiModelInfo = OpenAiCompatibleModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 211: {
          if (tag !== 1690) {
            break;
          }

          message.actModeOllamaModelId = reader.string();
          continue;
        }
        case 212: {
          if (tag !== 1698) {
            break;
          }

          message.actModeLmStudioModelId = reader.string();
          continue;
        }
        case 213: {
          if (tag !== 1706) {
            break;
          }

          message.actModeLiteLlmModelId = reader.string();
          continue;
        }
        case 214: {
          if (tag !== 1714) {
            break;
          }

          message.actModeLiteLlmModelInfo = LiteLLMModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 215: {
          if (tag !== 1722) {
            break;
          }

          message.actModeRequestyModelId = reader.string();
          continue;
        }
        case 216: {
          if (tag !== 1730) {
            break;
          }

          message.actModeRequestyModelInfo = OpenRouterModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 217: {
          if (tag !== 1738) {
            break;
          }

          message.actModeTogetherModelId = reader.string();
          continue;
        }
        case 218: {
          if (tag !== 1746) {
            break;
          }

          message.actModeFireworksModelId = reader.string();
          continue;
        }
        case 219: {
          if (tag !== 1754) {
            break;
          }

          message.actModeSapAiCoreModelId = reader.string();
          continue;
        }
        case 220: {
          if (tag !== 1762) {
            break;
          }

          message.actModeHuaweiCloudMaasModelId = reader.string();
          continue;
        }
        case 221: {
          if (tag !== 1770) {
            break;
          }

          message.actModeHuaweiCloudMaasModelInfo = OpenRouterModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 222: {
          if (tag !== 1778) {
            break;
          }

          message.actModeVercelAiGatewayModelId = reader.string();
          continue;
        }
        case 223: {
          if (tag !== 1786) {
            break;
          }

          message.actModeVercelAiGatewayModelInfo = OpenRouterModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 224: {
          if (tag !== 1794) {
            break;
          }

          message.actModeOcaModelId = reader.string();
          continue;
        }
        case 225: {
          if (tag !== 1802) {
            break;
          }

          message.actModeOcaModelInfo = OcaModelInfo.decode(reader, reader.uint32());
          continue;
        }
        case 301: {
          if (tag !== 2410) {
            break;
          }

          message.awsAuthentication = reader.string();
          continue;
        }
        case 302: {
          if (tag !== 2418) {
            break;
          }

          message.awsBedrockApiKey = reader.string();
          continue;
        }
        case 303: {
          if (tag !== 2426) {
            break;
          }

          message.clineAccountId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiConfiguration {
    return {
      apiKey: isSet(object.apiKey) ? globalThis.String(object.apiKey) : undefined,
      clineApiKey: isSet(object.clineApiKey) ? globalThis.String(object.clineApiKey) : undefined,
      ulid: isSet(object.ulid) ? globalThis.String(object.ulid) : undefined,
      liteLlmBaseUrl: isSet(object.liteLlmBaseUrl) ? globalThis.String(object.liteLlmBaseUrl) : undefined,
      liteLlmApiKey: isSet(object.liteLlmApiKey) ? globalThis.String(object.liteLlmApiKey) : undefined,
      liteLlmUsePromptCache: isSet(object.liteLlmUsePromptCache)
        ? globalThis.Boolean(object.liteLlmUsePromptCache)
        : undefined,
      openAiHeaders: isObject(object.openAiHeaders)
        ? Object.entries(object.openAiHeaders).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      anthropicBaseUrl: isSet(object.anthropicBaseUrl) ? globalThis.String(object.anthropicBaseUrl) : undefined,
      openRouterApiKey: isSet(object.openRouterApiKey) ? globalThis.String(object.openRouterApiKey) : undefined,
      openRouterProviderSorting: isSet(object.openRouterProviderSorting)
        ? globalThis.String(object.openRouterProviderSorting)
        : undefined,
      awsAccessKey: isSet(object.awsAccessKey) ? globalThis.String(object.awsAccessKey) : undefined,
      awsSecretKey: isSet(object.awsSecretKey) ? globalThis.String(object.awsSecretKey) : undefined,
      awsSessionToken: isSet(object.awsSessionToken) ? globalThis.String(object.awsSessionToken) : undefined,
      awsRegion: isSet(object.awsRegion) ? globalThis.String(object.awsRegion) : undefined,
      awsUseCrossRegionInference: isSet(object.awsUseCrossRegionInference)
        ? globalThis.Boolean(object.awsUseCrossRegionInference)
        : undefined,
      awsBedrockUsePromptCache: isSet(object.awsBedrockUsePromptCache)
        ? globalThis.Boolean(object.awsBedrockUsePromptCache)
        : undefined,
      awsUseProfile: isSet(object.awsUseProfile) ? globalThis.Boolean(object.awsUseProfile) : undefined,
      awsProfile: isSet(object.awsProfile) ? globalThis.String(object.awsProfile) : undefined,
      awsBedrockEndpoint: isSet(object.awsBedrockEndpoint) ? globalThis.String(object.awsBedrockEndpoint) : undefined,
      claudeCodePath: isSet(object.claudeCodePath) ? globalThis.String(object.claudeCodePath) : undefined,
      vertexProjectId: isSet(object.vertexProjectId) ? globalThis.String(object.vertexProjectId) : undefined,
      vertexRegion: isSet(object.vertexRegion) ? globalThis.String(object.vertexRegion) : undefined,
      openAiBaseUrl: isSet(object.openAiBaseUrl) ? globalThis.String(object.openAiBaseUrl) : undefined,
      openAiApiKey: isSet(object.openAiApiKey) ? globalThis.String(object.openAiApiKey) : undefined,
      ollamaBaseUrl: isSet(object.ollamaBaseUrl) ? globalThis.String(object.ollamaBaseUrl) : undefined,
      ollamaApiOptionsCtxNum: isSet(object.ollamaApiOptionsCtxNum)
        ? globalThis.String(object.ollamaApiOptionsCtxNum)
        : undefined,
      lmStudioBaseUrl: isSet(object.lmStudioBaseUrl) ? globalThis.String(object.lmStudioBaseUrl) : undefined,
      geminiApiKey: isSet(object.geminiApiKey) ? globalThis.String(object.geminiApiKey) : undefined,
      geminiBaseUrl: isSet(object.geminiBaseUrl) ? globalThis.String(object.geminiBaseUrl) : undefined,
      openAiNativeApiKey: isSet(object.openAiNativeApiKey) ? globalThis.String(object.openAiNativeApiKey) : undefined,
      deepSeekApiKey: isSet(object.deepSeekApiKey) ? globalThis.String(object.deepSeekApiKey) : undefined,
      requestyApiKey: isSet(object.requestyApiKey) ? globalThis.String(object.requestyApiKey) : undefined,
      requestyBaseUrl: isSet(object.requestyBaseUrl) ? globalThis.String(object.requestyBaseUrl) : undefined,
      togetherApiKey: isSet(object.togetherApiKey) ? globalThis.String(object.togetherApiKey) : undefined,
      fireworksApiKey: isSet(object.fireworksApiKey) ? globalThis.String(object.fireworksApiKey) : undefined,
      fireworksModelMaxCompletionTokens: isSet(object.fireworksModelMaxCompletionTokens)
        ? globalThis.Number(object.fireworksModelMaxCompletionTokens)
        : undefined,
      fireworksModelMaxTokens: isSet(object.fireworksModelMaxTokens)
        ? globalThis.Number(object.fireworksModelMaxTokens)
        : undefined,
      qwenApiKey: isSet(object.qwenApiKey) ? globalThis.String(object.qwenApiKey) : undefined,
      doubaoApiKey: isSet(object.doubaoApiKey) ? globalThis.String(object.doubaoApiKey) : undefined,
      mistralApiKey: isSet(object.mistralApiKey) ? globalThis.String(object.mistralApiKey) : undefined,
      azureApiVersion: isSet(object.azureApiVersion) ? globalThis.String(object.azureApiVersion) : undefined,
      qwenApiLine: isSet(object.qwenApiLine) ? globalThis.String(object.qwenApiLine) : undefined,
      nebiusApiKey: isSet(object.nebiusApiKey) ? globalThis.String(object.nebiusApiKey) : undefined,
      asksageApiUrl: isSet(object.asksageApiUrl) ? globalThis.String(object.asksageApiUrl) : undefined,
      asksageApiKey: isSet(object.asksageApiKey) ? globalThis.String(object.asksageApiKey) : undefined,
      xaiApiKey: isSet(object.xaiApiKey) ? globalThis.String(object.xaiApiKey) : undefined,
      sambanovaApiKey: isSet(object.sambanovaApiKey) ? globalThis.String(object.sambanovaApiKey) : undefined,
      cerebrasApiKey: isSet(object.cerebrasApiKey) ? globalThis.String(object.cerebrasApiKey) : undefined,
      requestTimeoutMs: isSet(object.requestTimeoutMs) ? globalThis.Number(object.requestTimeoutMs) : undefined,
      sapAiCoreClientId: isSet(object.sapAiCoreClientId) ? globalThis.String(object.sapAiCoreClientId) : undefined,
      sapAiCoreClientSecret: isSet(object.sapAiCoreClientSecret)
        ? globalThis.String(object.sapAiCoreClientSecret)
        : undefined,
      sapAiResourceGroup: isSet(object.sapAiResourceGroup) ? globalThis.String(object.sapAiResourceGroup) : undefined,
      sapAiCoreTokenUrl: isSet(object.sapAiCoreTokenUrl) ? globalThis.String(object.sapAiCoreTokenUrl) : undefined,
      sapAiCoreBaseUrl: isSet(object.sapAiCoreBaseUrl) ? globalThis.String(object.sapAiCoreBaseUrl) : undefined,
      moonshotApiKey: isSet(object.moonshotApiKey) ? globalThis.String(object.moonshotApiKey) : undefined,
      moonshotApiLine: isSet(object.moonshotApiLine) ? globalThis.String(object.moonshotApiLine) : undefined,
      huaweiCloudMaasApiKey: isSet(object.huaweiCloudMaasApiKey)
        ? globalThis.String(object.huaweiCloudMaasApiKey)
        : undefined,
      ollamaApiKey: isSet(object.ollamaApiKey) ? globalThis.String(object.ollamaApiKey) : undefined,
      zaiApiKey: isSet(object.zaiApiKey) ? globalThis.String(object.zaiApiKey) : undefined,
      zaiApiLine: isSet(object.zaiApiLine) ? globalThis.String(object.zaiApiLine) : undefined,
      lmStudioMaxTokens: isSet(object.lmStudioMaxTokens) ? globalThis.String(object.lmStudioMaxTokens) : undefined,
      vercelAiGatewayApiKey: isSet(object.vercelAiGatewayApiKey)
        ? globalThis.String(object.vercelAiGatewayApiKey)
        : undefined,
      qwenCodeOauthPath: isSet(object.qwenCodeOauthPath) ? globalThis.String(object.qwenCodeOauthPath) : undefined,
      difyApiKey: isSet(object.difyApiKey) ? globalThis.String(object.difyApiKey) : undefined,
      difyBaseUrl: isSet(object.difyBaseUrl) ? globalThis.String(object.difyBaseUrl) : undefined,
      ocaBaseUrl: isSet(object.ocaBaseUrl) ? globalThis.String(object.ocaBaseUrl) : undefined,
      ocaApiKey: isSet(object.ocaApiKey) ? globalThis.String(object.ocaApiKey) : undefined,
      ocaRefreshToken: isSet(object.ocaRefreshToken) ? globalThis.String(object.ocaRefreshToken) : undefined,
      planModeApiProvider: isSet(object.planModeApiProvider)
        ? apiProviderFromJSON(object.planModeApiProvider)
        : undefined,
      planModeApiModelId: isSet(object.planModeApiModelId) ? globalThis.String(object.planModeApiModelId) : undefined,
      planModeThinkingBudgetTokens: isSet(object.planModeThinkingBudgetTokens)
        ? globalThis.Number(object.planModeThinkingBudgetTokens)
        : undefined,
      planModeReasoningEffort: isSet(object.planModeReasoningEffort)
        ? globalThis.String(object.planModeReasoningEffort)
        : undefined,
      planModeVsCodeLmModelSelector: isSet(object.planModeVsCodeLmModelSelector)
        ? LanguageModelChatSelector.fromJSON(object.planModeVsCodeLmModelSelector)
        : undefined,
      planModeAwsBedrockCustomSelected: isSet(object.planModeAwsBedrockCustomSelected)
        ? globalThis.Boolean(object.planModeAwsBedrockCustomSelected)
        : undefined,
      planModeAwsBedrockCustomModelBaseId: isSet(object.planModeAwsBedrockCustomModelBaseId)
        ? globalThis.String(object.planModeAwsBedrockCustomModelBaseId)
        : undefined,
      planModeOpenRouterModelId: isSet(object.planModeOpenRouterModelId)
        ? globalThis.String(object.planModeOpenRouterModelId)
        : undefined,
      planModeOpenRouterModelInfo: isSet(object.planModeOpenRouterModelInfo)
        ? OpenRouterModelInfo.fromJSON(object.planModeOpenRouterModelInfo)
        : undefined,
      planModeOpenAiModelId: isSet(object.planModeOpenAiModelId)
        ? globalThis.String(object.planModeOpenAiModelId)
        : undefined,
      planModeOpenAiModelInfo: isSet(object.planModeOpenAiModelInfo)
        ? OpenAiCompatibleModelInfo.fromJSON(object.planModeOpenAiModelInfo)
        : undefined,
      planModeOllamaModelId: isSet(object.planModeOllamaModelId)
        ? globalThis.String(object.planModeOllamaModelId)
        : undefined,
      planModeLmStudioModelId: isSet(object.planModeLmStudioModelId)
        ? globalThis.String(object.planModeLmStudioModelId)
        : undefined,
      planModeLiteLlmModelId: isSet(object.planModeLiteLlmModelId)
        ? globalThis.String(object.planModeLiteLlmModelId)
        : undefined,
      planModeLiteLlmModelInfo: isSet(object.planModeLiteLlmModelInfo)
        ? LiteLLMModelInfo.fromJSON(object.planModeLiteLlmModelInfo)
        : undefined,
      planModeRequestyModelId: isSet(object.planModeRequestyModelId)
        ? globalThis.String(object.planModeRequestyModelId)
        : undefined,
      planModeRequestyModelInfo: isSet(object.planModeRequestyModelInfo)
        ? OpenRouterModelInfo.fromJSON(object.planModeRequestyModelInfo)
        : undefined,
      planModeTogetherModelId: isSet(object.planModeTogetherModelId)
        ? globalThis.String(object.planModeTogetherModelId)
        : undefined,
      planModeFireworksModelId: isSet(object.planModeFireworksModelId)
        ? globalThis.String(object.planModeFireworksModelId)
        : undefined,
      planModeSapAiCoreModelId: isSet(object.planModeSapAiCoreModelId)
        ? globalThis.String(object.planModeSapAiCoreModelId)
        : undefined,
      planModeHuaweiCloudMaasModelId: isSet(object.planModeHuaweiCloudMaasModelId)
        ? globalThis.String(object.planModeHuaweiCloudMaasModelId)
        : undefined,
      planModeHuaweiCloudMaasModelInfo: isSet(object.planModeHuaweiCloudMaasModelInfo)
        ? OpenRouterModelInfo.fromJSON(object.planModeHuaweiCloudMaasModelInfo)
        : undefined,
      planModeVercelAiGatewayModelId: isSet(object.planModeVercelAiGatewayModelId)
        ? globalThis.String(object.planModeVercelAiGatewayModelId)
        : undefined,
      planModeVercelAiGatewayModelInfo: isSet(object.planModeVercelAiGatewayModelInfo)
        ? OpenRouterModelInfo.fromJSON(object.planModeVercelAiGatewayModelInfo)
        : undefined,
      planModeOcaModelId: isSet(object.planModeOcaModelId) ? globalThis.String(object.planModeOcaModelId) : undefined,
      planModeOcaModelInfo: isSet(object.planModeOcaModelInfo)
        ? OcaModelInfo.fromJSON(object.planModeOcaModelInfo)
        : undefined,
      actModeApiProvider: isSet(object.actModeApiProvider) ? apiProviderFromJSON(object.actModeApiProvider) : undefined,
      actModeApiModelId: isSet(object.actModeApiModelId) ? globalThis.String(object.actModeApiModelId) : undefined,
      actModeThinkingBudgetTokens: isSet(object.actModeThinkingBudgetTokens)
        ? globalThis.Number(object.actModeThinkingBudgetTokens)
        : undefined,
      actModeReasoningEffort: isSet(object.actModeReasoningEffort)
        ? globalThis.String(object.actModeReasoningEffort)
        : undefined,
      actModeVsCodeLmModelSelector: isSet(object.actModeVsCodeLmModelSelector)
        ? LanguageModelChatSelector.fromJSON(object.actModeVsCodeLmModelSelector)
        : undefined,
      actModeAwsBedrockCustomSelected: isSet(object.actModeAwsBedrockCustomSelected)
        ? globalThis.Boolean(object.actModeAwsBedrockCustomSelected)
        : undefined,
      actModeAwsBedrockCustomModelBaseId: isSet(object.actModeAwsBedrockCustomModelBaseId)
        ? globalThis.String(object.actModeAwsBedrockCustomModelBaseId)
        : undefined,
      actModeOpenRouterModelId: isSet(object.actModeOpenRouterModelId)
        ? globalThis.String(object.actModeOpenRouterModelId)
        : undefined,
      actModeOpenRouterModelInfo: isSet(object.actModeOpenRouterModelInfo)
        ? OpenRouterModelInfo.fromJSON(object.actModeOpenRouterModelInfo)
        : undefined,
      actModeOpenAiModelId: isSet(object.actModeOpenAiModelId)
        ? globalThis.String(object.actModeOpenAiModelId)
        : undefined,
      actModeOpenAiModelInfo: isSet(object.actModeOpenAiModelInfo)
        ? OpenAiCompatibleModelInfo.fromJSON(object.actModeOpenAiModelInfo)
        : undefined,
      actModeOllamaModelId: isSet(object.actModeOllamaModelId)
        ? globalThis.String(object.actModeOllamaModelId)
        : undefined,
      actModeLmStudioModelId: isSet(object.actModeLmStudioModelId)
        ? globalThis.String(object.actModeLmStudioModelId)
        : undefined,
      actModeLiteLlmModelId: isSet(object.actModeLiteLlmModelId)
        ? globalThis.String(object.actModeLiteLlmModelId)
        : undefined,
      actModeLiteLlmModelInfo: isSet(object.actModeLiteLlmModelInfo)
        ? LiteLLMModelInfo.fromJSON(object.actModeLiteLlmModelInfo)
        : undefined,
      actModeRequestyModelId: isSet(object.actModeRequestyModelId)
        ? globalThis.String(object.actModeRequestyModelId)
        : undefined,
      actModeRequestyModelInfo: isSet(object.actModeRequestyModelInfo)
        ? OpenRouterModelInfo.fromJSON(object.actModeRequestyModelInfo)
        : undefined,
      actModeTogetherModelId: isSet(object.actModeTogetherModelId)
        ? globalThis.String(object.actModeTogetherModelId)
        : undefined,
      actModeFireworksModelId: isSet(object.actModeFireworksModelId)
        ? globalThis.String(object.actModeFireworksModelId)
        : undefined,
      actModeSapAiCoreModelId: isSet(object.actModeSapAiCoreModelId)
        ? globalThis.String(object.actModeSapAiCoreModelId)
        : undefined,
      actModeHuaweiCloudMaasModelId: isSet(object.actModeHuaweiCloudMaasModelId)
        ? globalThis.String(object.actModeHuaweiCloudMaasModelId)
        : undefined,
      actModeHuaweiCloudMaasModelInfo: isSet(object.actModeHuaweiCloudMaasModelInfo)
        ? OpenRouterModelInfo.fromJSON(object.actModeHuaweiCloudMaasModelInfo)
        : undefined,
      actModeVercelAiGatewayModelId: isSet(object.actModeVercelAiGatewayModelId)
        ? globalThis.String(object.actModeVercelAiGatewayModelId)
        : undefined,
      actModeVercelAiGatewayModelInfo: isSet(object.actModeVercelAiGatewayModelInfo)
        ? OpenRouterModelInfo.fromJSON(object.actModeVercelAiGatewayModelInfo)
        : undefined,
      actModeOcaModelId: isSet(object.actModeOcaModelId) ? globalThis.String(object.actModeOcaModelId) : undefined,
      actModeOcaModelInfo: isSet(object.actModeOcaModelInfo)
        ? OcaModelInfo.fromJSON(object.actModeOcaModelInfo)
        : undefined,
      awsAuthentication: isSet(object.awsAuthentication) ? globalThis.String(object.awsAuthentication) : undefined,
      awsBedrockApiKey: isSet(object.awsBedrockApiKey) ? globalThis.String(object.awsBedrockApiKey) : undefined,
      clineAccountId: isSet(object.clineAccountId) ? globalThis.String(object.clineAccountId) : undefined,
    };
  },

  toJSON(message: ApiConfiguration): unknown {
    const obj: any = {};
    if (message.apiKey !== undefined) {
      obj.apiKey = message.apiKey;
    }
    if (message.clineApiKey !== undefined) {
      obj.clineApiKey = message.clineApiKey;
    }
    if (message.ulid !== undefined) {
      obj.ulid = message.ulid;
    }
    if (message.liteLlmBaseUrl !== undefined) {
      obj.liteLlmBaseUrl = message.liteLlmBaseUrl;
    }
    if (message.liteLlmApiKey !== undefined) {
      obj.liteLlmApiKey = message.liteLlmApiKey;
    }
    if (message.liteLlmUsePromptCache !== undefined) {
      obj.liteLlmUsePromptCache = message.liteLlmUsePromptCache;
    }
    if (message.openAiHeaders) {
      const entries = Object.entries(message.openAiHeaders);
      if (entries.length > 0) {
        obj.openAiHeaders = {};
        entries.forEach(([k, v]) => {
          obj.openAiHeaders[k] = v;
        });
      }
    }
    if (message.anthropicBaseUrl !== undefined) {
      obj.anthropicBaseUrl = message.anthropicBaseUrl;
    }
    if (message.openRouterApiKey !== undefined) {
      obj.openRouterApiKey = message.openRouterApiKey;
    }
    if (message.openRouterProviderSorting !== undefined) {
      obj.openRouterProviderSorting = message.openRouterProviderSorting;
    }
    if (message.awsAccessKey !== undefined) {
      obj.awsAccessKey = message.awsAccessKey;
    }
    if (message.awsSecretKey !== undefined) {
      obj.awsSecretKey = message.awsSecretKey;
    }
    if (message.awsSessionToken !== undefined) {
      obj.awsSessionToken = message.awsSessionToken;
    }
    if (message.awsRegion !== undefined) {
      obj.awsRegion = message.awsRegion;
    }
    if (message.awsUseCrossRegionInference !== undefined) {
      obj.awsUseCrossRegionInference = message.awsUseCrossRegionInference;
    }
    if (message.awsBedrockUsePromptCache !== undefined) {
      obj.awsBedrockUsePromptCache = message.awsBedrockUsePromptCache;
    }
    if (message.awsUseProfile !== undefined) {
      obj.awsUseProfile = message.awsUseProfile;
    }
    if (message.awsProfile !== undefined) {
      obj.awsProfile = message.awsProfile;
    }
    if (message.awsBedrockEndpoint !== undefined) {
      obj.awsBedrockEndpoint = message.awsBedrockEndpoint;
    }
    if (message.claudeCodePath !== undefined) {
      obj.claudeCodePath = message.claudeCodePath;
    }
    if (message.vertexProjectId !== undefined) {
      obj.vertexProjectId = message.vertexProjectId;
    }
    if (message.vertexRegion !== undefined) {
      obj.vertexRegion = message.vertexRegion;
    }
    if (message.openAiBaseUrl !== undefined) {
      obj.openAiBaseUrl = message.openAiBaseUrl;
    }
    if (message.openAiApiKey !== undefined) {
      obj.openAiApiKey = message.openAiApiKey;
    }
    if (message.ollamaBaseUrl !== undefined) {
      obj.ollamaBaseUrl = message.ollamaBaseUrl;
    }
    if (message.ollamaApiOptionsCtxNum !== undefined) {
      obj.ollamaApiOptionsCtxNum = message.ollamaApiOptionsCtxNum;
    }
    if (message.lmStudioBaseUrl !== undefined) {
      obj.lmStudioBaseUrl = message.lmStudioBaseUrl;
    }
    if (message.geminiApiKey !== undefined) {
      obj.geminiApiKey = message.geminiApiKey;
    }
    if (message.geminiBaseUrl !== undefined) {
      obj.geminiBaseUrl = message.geminiBaseUrl;
    }
    if (message.openAiNativeApiKey !== undefined) {
      obj.openAiNativeApiKey = message.openAiNativeApiKey;
    }
    if (message.deepSeekApiKey !== undefined) {
      obj.deepSeekApiKey = message.deepSeekApiKey;
    }
    if (message.requestyApiKey !== undefined) {
      obj.requestyApiKey = message.requestyApiKey;
    }
    if (message.requestyBaseUrl !== undefined) {
      obj.requestyBaseUrl = message.requestyBaseUrl;
    }
    if (message.togetherApiKey !== undefined) {
      obj.togetherApiKey = message.togetherApiKey;
    }
    if (message.fireworksApiKey !== undefined) {
      obj.fireworksApiKey = message.fireworksApiKey;
    }
    if (message.fireworksModelMaxCompletionTokens !== undefined) {
      obj.fireworksModelMaxCompletionTokens = Math.round(message.fireworksModelMaxCompletionTokens);
    }
    if (message.fireworksModelMaxTokens !== undefined) {
      obj.fireworksModelMaxTokens = Math.round(message.fireworksModelMaxTokens);
    }
    if (message.qwenApiKey !== undefined) {
      obj.qwenApiKey = message.qwenApiKey;
    }
    if (message.doubaoApiKey !== undefined) {
      obj.doubaoApiKey = message.doubaoApiKey;
    }
    if (message.mistralApiKey !== undefined) {
      obj.mistralApiKey = message.mistralApiKey;
    }
    if (message.azureApiVersion !== undefined) {
      obj.azureApiVersion = message.azureApiVersion;
    }
    if (message.qwenApiLine !== undefined) {
      obj.qwenApiLine = message.qwenApiLine;
    }
    if (message.nebiusApiKey !== undefined) {
      obj.nebiusApiKey = message.nebiusApiKey;
    }
    if (message.asksageApiUrl !== undefined) {
      obj.asksageApiUrl = message.asksageApiUrl;
    }
    if (message.asksageApiKey !== undefined) {
      obj.asksageApiKey = message.asksageApiKey;
    }
    if (message.xaiApiKey !== undefined) {
      obj.xaiApiKey = message.xaiApiKey;
    }
    if (message.sambanovaApiKey !== undefined) {
      obj.sambanovaApiKey = message.sambanovaApiKey;
    }
    if (message.cerebrasApiKey !== undefined) {
      obj.cerebrasApiKey = message.cerebrasApiKey;
    }
    if (message.requestTimeoutMs !== undefined) {
      obj.requestTimeoutMs = Math.round(message.requestTimeoutMs);
    }
    if (message.sapAiCoreClientId !== undefined) {
      obj.sapAiCoreClientId = message.sapAiCoreClientId;
    }
    if (message.sapAiCoreClientSecret !== undefined) {
      obj.sapAiCoreClientSecret = message.sapAiCoreClientSecret;
    }
    if (message.sapAiResourceGroup !== undefined) {
      obj.sapAiResourceGroup = message.sapAiResourceGroup;
    }
    if (message.sapAiCoreTokenUrl !== undefined) {
      obj.sapAiCoreTokenUrl = message.sapAiCoreTokenUrl;
    }
    if (message.sapAiCoreBaseUrl !== undefined) {
      obj.sapAiCoreBaseUrl = message.sapAiCoreBaseUrl;
    }
    if (message.moonshotApiKey !== undefined) {
      obj.moonshotApiKey = message.moonshotApiKey;
    }
    if (message.moonshotApiLine !== undefined) {
      obj.moonshotApiLine = message.moonshotApiLine;
    }
    if (message.huaweiCloudMaasApiKey !== undefined) {
      obj.huaweiCloudMaasApiKey = message.huaweiCloudMaasApiKey;
    }
    if (message.ollamaApiKey !== undefined) {
      obj.ollamaApiKey = message.ollamaApiKey;
    }
    if (message.zaiApiKey !== undefined) {
      obj.zaiApiKey = message.zaiApiKey;
    }
    if (message.zaiApiLine !== undefined) {
      obj.zaiApiLine = message.zaiApiLine;
    }
    if (message.lmStudioMaxTokens !== undefined) {
      obj.lmStudioMaxTokens = message.lmStudioMaxTokens;
    }
    if (message.vercelAiGatewayApiKey !== undefined) {
      obj.vercelAiGatewayApiKey = message.vercelAiGatewayApiKey;
    }
    if (message.qwenCodeOauthPath !== undefined) {
      obj.qwenCodeOauthPath = message.qwenCodeOauthPath;
    }
    if (message.difyApiKey !== undefined) {
      obj.difyApiKey = message.difyApiKey;
    }
    if (message.difyBaseUrl !== undefined) {
      obj.difyBaseUrl = message.difyBaseUrl;
    }
    if (message.ocaBaseUrl !== undefined) {
      obj.ocaBaseUrl = message.ocaBaseUrl;
    }
    if (message.ocaApiKey !== undefined) {
      obj.ocaApiKey = message.ocaApiKey;
    }
    if (message.ocaRefreshToken !== undefined) {
      obj.ocaRefreshToken = message.ocaRefreshToken;
    }
    if (message.planModeApiProvider !== undefined) {
      obj.planModeApiProvider = apiProviderToJSON(message.planModeApiProvider);
    }
    if (message.planModeApiModelId !== undefined) {
      obj.planModeApiModelId = message.planModeApiModelId;
    }
    if (message.planModeThinkingBudgetTokens !== undefined) {
      obj.planModeThinkingBudgetTokens = Math.round(message.planModeThinkingBudgetTokens);
    }
    if (message.planModeReasoningEffort !== undefined) {
      obj.planModeReasoningEffort = message.planModeReasoningEffort;
    }
    if (message.planModeVsCodeLmModelSelector !== undefined) {
      obj.planModeVsCodeLmModelSelector = LanguageModelChatSelector.toJSON(message.planModeVsCodeLmModelSelector);
    }
    if (message.planModeAwsBedrockCustomSelected !== undefined) {
      obj.planModeAwsBedrockCustomSelected = message.planModeAwsBedrockCustomSelected;
    }
    if (message.planModeAwsBedrockCustomModelBaseId !== undefined) {
      obj.planModeAwsBedrockCustomModelBaseId = message.planModeAwsBedrockCustomModelBaseId;
    }
    if (message.planModeOpenRouterModelId !== undefined) {
      obj.planModeOpenRouterModelId = message.planModeOpenRouterModelId;
    }
    if (message.planModeOpenRouterModelInfo !== undefined) {
      obj.planModeOpenRouterModelInfo = OpenRouterModelInfo.toJSON(message.planModeOpenRouterModelInfo);
    }
    if (message.planModeOpenAiModelId !== undefined) {
      obj.planModeOpenAiModelId = message.planModeOpenAiModelId;
    }
    if (message.planModeOpenAiModelInfo !== undefined) {
      obj.planModeOpenAiModelInfo = OpenAiCompatibleModelInfo.toJSON(message.planModeOpenAiModelInfo);
    }
    if (message.planModeOllamaModelId !== undefined) {
      obj.planModeOllamaModelId = message.planModeOllamaModelId;
    }
    if (message.planModeLmStudioModelId !== undefined) {
      obj.planModeLmStudioModelId = message.planModeLmStudioModelId;
    }
    if (message.planModeLiteLlmModelId !== undefined) {
      obj.planModeLiteLlmModelId = message.planModeLiteLlmModelId;
    }
    if (message.planModeLiteLlmModelInfo !== undefined) {
      obj.planModeLiteLlmModelInfo = LiteLLMModelInfo.toJSON(message.planModeLiteLlmModelInfo);
    }
    if (message.planModeRequestyModelId !== undefined) {
      obj.planModeRequestyModelId = message.planModeRequestyModelId;
    }
    if (message.planModeRequestyModelInfo !== undefined) {
      obj.planModeRequestyModelInfo = OpenRouterModelInfo.toJSON(message.planModeRequestyModelInfo);
    }
    if (message.planModeTogetherModelId !== undefined) {
      obj.planModeTogetherModelId = message.planModeTogetherModelId;
    }
    if (message.planModeFireworksModelId !== undefined) {
      obj.planModeFireworksModelId = message.planModeFireworksModelId;
    }
    if (message.planModeSapAiCoreModelId !== undefined) {
      obj.planModeSapAiCoreModelId = message.planModeSapAiCoreModelId;
    }
    if (message.planModeHuaweiCloudMaasModelId !== undefined) {
      obj.planModeHuaweiCloudMaasModelId = message.planModeHuaweiCloudMaasModelId;
    }
    if (message.planModeHuaweiCloudMaasModelInfo !== undefined) {
      obj.planModeHuaweiCloudMaasModelInfo = OpenRouterModelInfo.toJSON(message.planModeHuaweiCloudMaasModelInfo);
    }
    if (message.planModeVercelAiGatewayModelId !== undefined) {
      obj.planModeVercelAiGatewayModelId = message.planModeVercelAiGatewayModelId;
    }
    if (message.planModeVercelAiGatewayModelInfo !== undefined) {
      obj.planModeVercelAiGatewayModelInfo = OpenRouterModelInfo.toJSON(message.planModeVercelAiGatewayModelInfo);
    }
    if (message.planModeOcaModelId !== undefined) {
      obj.planModeOcaModelId = message.planModeOcaModelId;
    }
    if (message.planModeOcaModelInfo !== undefined) {
      obj.planModeOcaModelInfo = OcaModelInfo.toJSON(message.planModeOcaModelInfo);
    }
    if (message.actModeApiProvider !== undefined) {
      obj.actModeApiProvider = apiProviderToJSON(message.actModeApiProvider);
    }
    if (message.actModeApiModelId !== undefined) {
      obj.actModeApiModelId = message.actModeApiModelId;
    }
    if (message.actModeThinkingBudgetTokens !== undefined) {
      obj.actModeThinkingBudgetTokens = Math.round(message.actModeThinkingBudgetTokens);
    }
    if (message.actModeReasoningEffort !== undefined) {
      obj.actModeReasoningEffort = message.actModeReasoningEffort;
    }
    if (message.actModeVsCodeLmModelSelector !== undefined) {
      obj.actModeVsCodeLmModelSelector = LanguageModelChatSelector.toJSON(message.actModeVsCodeLmModelSelector);
    }
    if (message.actModeAwsBedrockCustomSelected !== undefined) {
      obj.actModeAwsBedrockCustomSelected = message.actModeAwsBedrockCustomSelected;
    }
    if (message.actModeAwsBedrockCustomModelBaseId !== undefined) {
      obj.actModeAwsBedrockCustomModelBaseId = message.actModeAwsBedrockCustomModelBaseId;
    }
    if (message.actModeOpenRouterModelId !== undefined) {
      obj.actModeOpenRouterModelId = message.actModeOpenRouterModelId;
    }
    if (message.actModeOpenRouterModelInfo !== undefined) {
      obj.actModeOpenRouterModelInfo = OpenRouterModelInfo.toJSON(message.actModeOpenRouterModelInfo);
    }
    if (message.actModeOpenAiModelId !== undefined) {
      obj.actModeOpenAiModelId = message.actModeOpenAiModelId;
    }
    if (message.actModeOpenAiModelInfo !== undefined) {
      obj.actModeOpenAiModelInfo = OpenAiCompatibleModelInfo.toJSON(message.actModeOpenAiModelInfo);
    }
    if (message.actModeOllamaModelId !== undefined) {
      obj.actModeOllamaModelId = message.actModeOllamaModelId;
    }
    if (message.actModeLmStudioModelId !== undefined) {
      obj.actModeLmStudioModelId = message.actModeLmStudioModelId;
    }
    if (message.actModeLiteLlmModelId !== undefined) {
      obj.actModeLiteLlmModelId = message.actModeLiteLlmModelId;
    }
    if (message.actModeLiteLlmModelInfo !== undefined) {
      obj.actModeLiteLlmModelInfo = LiteLLMModelInfo.toJSON(message.actModeLiteLlmModelInfo);
    }
    if (message.actModeRequestyModelId !== undefined) {
      obj.actModeRequestyModelId = message.actModeRequestyModelId;
    }
    if (message.actModeRequestyModelInfo !== undefined) {
      obj.actModeRequestyModelInfo = OpenRouterModelInfo.toJSON(message.actModeRequestyModelInfo);
    }
    if (message.actModeTogetherModelId !== undefined) {
      obj.actModeTogetherModelId = message.actModeTogetherModelId;
    }
    if (message.actModeFireworksModelId !== undefined) {
      obj.actModeFireworksModelId = message.actModeFireworksModelId;
    }
    if (message.actModeSapAiCoreModelId !== undefined) {
      obj.actModeSapAiCoreModelId = message.actModeSapAiCoreModelId;
    }
    if (message.actModeHuaweiCloudMaasModelId !== undefined) {
      obj.actModeHuaweiCloudMaasModelId = message.actModeHuaweiCloudMaasModelId;
    }
    if (message.actModeHuaweiCloudMaasModelInfo !== undefined) {
      obj.actModeHuaweiCloudMaasModelInfo = OpenRouterModelInfo.toJSON(message.actModeHuaweiCloudMaasModelInfo);
    }
    if (message.actModeVercelAiGatewayModelId !== undefined) {
      obj.actModeVercelAiGatewayModelId = message.actModeVercelAiGatewayModelId;
    }
    if (message.actModeVercelAiGatewayModelInfo !== undefined) {
      obj.actModeVercelAiGatewayModelInfo = OpenRouterModelInfo.toJSON(message.actModeVercelAiGatewayModelInfo);
    }
    if (message.actModeOcaModelId !== undefined) {
      obj.actModeOcaModelId = message.actModeOcaModelId;
    }
    if (message.actModeOcaModelInfo !== undefined) {
      obj.actModeOcaModelInfo = OcaModelInfo.toJSON(message.actModeOcaModelInfo);
    }
    if (message.awsAuthentication !== undefined) {
      obj.awsAuthentication = message.awsAuthentication;
    }
    if (message.awsBedrockApiKey !== undefined) {
      obj.awsBedrockApiKey = message.awsBedrockApiKey;
    }
    if (message.clineAccountId !== undefined) {
      obj.clineAccountId = message.clineAccountId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiConfiguration>, I>>(base?: I): ApiConfiguration {
    return ApiConfiguration.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiConfiguration>, I>>(object: I): ApiConfiguration {
    const message = createBaseApiConfiguration();
    message.apiKey = object.apiKey ?? undefined;
    message.clineApiKey = object.clineApiKey ?? undefined;
    message.ulid = object.ulid ?? undefined;
    message.liteLlmBaseUrl = object.liteLlmBaseUrl ?? undefined;
    message.liteLlmApiKey = object.liteLlmApiKey ?? undefined;
    message.liteLlmUsePromptCache = object.liteLlmUsePromptCache ?? undefined;
    message.openAiHeaders = Object.entries(object.openAiHeaders ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.anthropicBaseUrl = object.anthropicBaseUrl ?? undefined;
    message.openRouterApiKey = object.openRouterApiKey ?? undefined;
    message.openRouterProviderSorting = object.openRouterProviderSorting ?? undefined;
    message.awsAccessKey = object.awsAccessKey ?? undefined;
    message.awsSecretKey = object.awsSecretKey ?? undefined;
    message.awsSessionToken = object.awsSessionToken ?? undefined;
    message.awsRegion = object.awsRegion ?? undefined;
    message.awsUseCrossRegionInference = object.awsUseCrossRegionInference ?? undefined;
    message.awsBedrockUsePromptCache = object.awsBedrockUsePromptCache ?? undefined;
    message.awsUseProfile = object.awsUseProfile ?? undefined;
    message.awsProfile = object.awsProfile ?? undefined;
    message.awsBedrockEndpoint = object.awsBedrockEndpoint ?? undefined;
    message.claudeCodePath = object.claudeCodePath ?? undefined;
    message.vertexProjectId = object.vertexProjectId ?? undefined;
    message.vertexRegion = object.vertexRegion ?? undefined;
    message.openAiBaseUrl = object.openAiBaseUrl ?? undefined;
    message.openAiApiKey = object.openAiApiKey ?? undefined;
    message.ollamaBaseUrl = object.ollamaBaseUrl ?? undefined;
    message.ollamaApiOptionsCtxNum = object.ollamaApiOptionsCtxNum ?? undefined;
    message.lmStudioBaseUrl = object.lmStudioBaseUrl ?? undefined;
    message.geminiApiKey = object.geminiApiKey ?? undefined;
    message.geminiBaseUrl = object.geminiBaseUrl ?? undefined;
    message.openAiNativeApiKey = object.openAiNativeApiKey ?? undefined;
    message.deepSeekApiKey = object.deepSeekApiKey ?? undefined;
    message.requestyApiKey = object.requestyApiKey ?? undefined;
    message.requestyBaseUrl = object.requestyBaseUrl ?? undefined;
    message.togetherApiKey = object.togetherApiKey ?? undefined;
    message.fireworksApiKey = object.fireworksApiKey ?? undefined;
    message.fireworksModelMaxCompletionTokens = object.fireworksModelMaxCompletionTokens ?? undefined;
    message.fireworksModelMaxTokens = object.fireworksModelMaxTokens ?? undefined;
    message.qwenApiKey = object.qwenApiKey ?? undefined;
    message.doubaoApiKey = object.doubaoApiKey ?? undefined;
    message.mistralApiKey = object.mistralApiKey ?? undefined;
    message.azureApiVersion = object.azureApiVersion ?? undefined;
    message.qwenApiLine = object.qwenApiLine ?? undefined;
    message.nebiusApiKey = object.nebiusApiKey ?? undefined;
    message.asksageApiUrl = object.asksageApiUrl ?? undefined;
    message.asksageApiKey = object.asksageApiKey ?? undefined;
    message.xaiApiKey = object.xaiApiKey ?? undefined;
    message.sambanovaApiKey = object.sambanovaApiKey ?? undefined;
    message.cerebrasApiKey = object.cerebrasApiKey ?? undefined;
    message.requestTimeoutMs = object.requestTimeoutMs ?? undefined;
    message.sapAiCoreClientId = object.sapAiCoreClientId ?? undefined;
    message.sapAiCoreClientSecret = object.sapAiCoreClientSecret ?? undefined;
    message.sapAiResourceGroup = object.sapAiResourceGroup ?? undefined;
    message.sapAiCoreTokenUrl = object.sapAiCoreTokenUrl ?? undefined;
    message.sapAiCoreBaseUrl = object.sapAiCoreBaseUrl ?? undefined;
    message.moonshotApiKey = object.moonshotApiKey ?? undefined;
    message.moonshotApiLine = object.moonshotApiLine ?? undefined;
    message.huaweiCloudMaasApiKey = object.huaweiCloudMaasApiKey ?? undefined;
    message.ollamaApiKey = object.ollamaApiKey ?? undefined;
    message.zaiApiKey = object.zaiApiKey ?? undefined;
    message.zaiApiLine = object.zaiApiLine ?? undefined;
    message.lmStudioMaxTokens = object.lmStudioMaxTokens ?? undefined;
    message.vercelAiGatewayApiKey = object.vercelAiGatewayApiKey ?? undefined;
    message.qwenCodeOauthPath = object.qwenCodeOauthPath ?? undefined;
    message.difyApiKey = object.difyApiKey ?? undefined;
    message.difyBaseUrl = object.difyBaseUrl ?? undefined;
    message.ocaBaseUrl = object.ocaBaseUrl ?? undefined;
    message.ocaApiKey = object.ocaApiKey ?? undefined;
    message.ocaRefreshToken = object.ocaRefreshToken ?? undefined;
    message.planModeApiProvider = object.planModeApiProvider ?? undefined;
    message.planModeApiModelId = object.planModeApiModelId ?? undefined;
    message.planModeThinkingBudgetTokens = object.planModeThinkingBudgetTokens ?? undefined;
    message.planModeReasoningEffort = object.planModeReasoningEffort ?? undefined;
    message.planModeVsCodeLmModelSelector =
      (object.planModeVsCodeLmModelSelector !== undefined && object.planModeVsCodeLmModelSelector !== null)
        ? LanguageModelChatSelector.fromPartial(object.planModeVsCodeLmModelSelector)
        : undefined;
    message.planModeAwsBedrockCustomSelected = object.planModeAwsBedrockCustomSelected ?? undefined;
    message.planModeAwsBedrockCustomModelBaseId = object.planModeAwsBedrockCustomModelBaseId ?? undefined;
    message.planModeOpenRouterModelId = object.planModeOpenRouterModelId ?? undefined;
    message.planModeOpenRouterModelInfo =
      (object.planModeOpenRouterModelInfo !== undefined && object.planModeOpenRouterModelInfo !== null)
        ? OpenRouterModelInfo.fromPartial(object.planModeOpenRouterModelInfo)
        : undefined;
    message.planModeOpenAiModelId = object.planModeOpenAiModelId ?? undefined;
    message.planModeOpenAiModelInfo =
      (object.planModeOpenAiModelInfo !== undefined && object.planModeOpenAiModelInfo !== null)
        ? OpenAiCompatibleModelInfo.fromPartial(object.planModeOpenAiModelInfo)
        : undefined;
    message.planModeOllamaModelId = object.planModeOllamaModelId ?? undefined;
    message.planModeLmStudioModelId = object.planModeLmStudioModelId ?? undefined;
    message.planModeLiteLlmModelId = object.planModeLiteLlmModelId ?? undefined;
    message.planModeLiteLlmModelInfo =
      (object.planModeLiteLlmModelInfo !== undefined && object.planModeLiteLlmModelInfo !== null)
        ? LiteLLMModelInfo.fromPartial(object.planModeLiteLlmModelInfo)
        : undefined;
    message.planModeRequestyModelId = object.planModeRequestyModelId ?? undefined;
    message.planModeRequestyModelInfo =
      (object.planModeRequestyModelInfo !== undefined && object.planModeRequestyModelInfo !== null)
        ? OpenRouterModelInfo.fromPartial(object.planModeRequestyModelInfo)
        : undefined;
    message.planModeTogetherModelId = object.planModeTogetherModelId ?? undefined;
    message.planModeFireworksModelId = object.planModeFireworksModelId ?? undefined;
    message.planModeSapAiCoreModelId = object.planModeSapAiCoreModelId ?? undefined;
    message.planModeHuaweiCloudMaasModelId = object.planModeHuaweiCloudMaasModelId ?? undefined;
    message.planModeHuaweiCloudMaasModelInfo =
      (object.planModeHuaweiCloudMaasModelInfo !== undefined && object.planModeHuaweiCloudMaasModelInfo !== null)
        ? OpenRouterModelInfo.fromPartial(object.planModeHuaweiCloudMaasModelInfo)
        : undefined;
    message.planModeVercelAiGatewayModelId = object.planModeVercelAiGatewayModelId ?? undefined;
    message.planModeVercelAiGatewayModelInfo =
      (object.planModeVercelAiGatewayModelInfo !== undefined && object.planModeVercelAiGatewayModelInfo !== null)
        ? OpenRouterModelInfo.fromPartial(object.planModeVercelAiGatewayModelInfo)
        : undefined;
    message.planModeOcaModelId = object.planModeOcaModelId ?? undefined;
    message.planModeOcaModelInfo = (object.planModeOcaModelInfo !== undefined && object.planModeOcaModelInfo !== null)
      ? OcaModelInfo.fromPartial(object.planModeOcaModelInfo)
      : undefined;
    message.actModeApiProvider = object.actModeApiProvider ?? undefined;
    message.actModeApiModelId = object.actModeApiModelId ?? undefined;
    message.actModeThinkingBudgetTokens = object.actModeThinkingBudgetTokens ?? undefined;
    message.actModeReasoningEffort = object.actModeReasoningEffort ?? undefined;
    message.actModeVsCodeLmModelSelector =
      (object.actModeVsCodeLmModelSelector !== undefined && object.actModeVsCodeLmModelSelector !== null)
        ? LanguageModelChatSelector.fromPartial(object.actModeVsCodeLmModelSelector)
        : undefined;
    message.actModeAwsBedrockCustomSelected = object.actModeAwsBedrockCustomSelected ?? undefined;
    message.actModeAwsBedrockCustomModelBaseId = object.actModeAwsBedrockCustomModelBaseId ?? undefined;
    message.actModeOpenRouterModelId = object.actModeOpenRouterModelId ?? undefined;
    message.actModeOpenRouterModelInfo =
      (object.actModeOpenRouterModelInfo !== undefined && object.actModeOpenRouterModelInfo !== null)
        ? OpenRouterModelInfo.fromPartial(object.actModeOpenRouterModelInfo)
        : undefined;
    message.actModeOpenAiModelId = object.actModeOpenAiModelId ?? undefined;
    message.actModeOpenAiModelInfo =
      (object.actModeOpenAiModelInfo !== undefined && object.actModeOpenAiModelInfo !== null)
        ? OpenAiCompatibleModelInfo.fromPartial(object.actModeOpenAiModelInfo)
        : undefined;
    message.actModeOllamaModelId = object.actModeOllamaModelId ?? undefined;
    message.actModeLmStudioModelId = object.actModeLmStudioModelId ?? undefined;
    message.actModeLiteLlmModelId = object.actModeLiteLlmModelId ?? undefined;
    message.actModeLiteLlmModelInfo =
      (object.actModeLiteLlmModelInfo !== undefined && object.actModeLiteLlmModelInfo !== null)
        ? LiteLLMModelInfo.fromPartial(object.actModeLiteLlmModelInfo)
        : undefined;
    message.actModeRequestyModelId = object.actModeRequestyModelId ?? undefined;
    message.actModeRequestyModelInfo =
      (object.actModeRequestyModelInfo !== undefined && object.actModeRequestyModelInfo !== null)
        ? OpenRouterModelInfo.fromPartial(object.actModeRequestyModelInfo)
        : undefined;
    message.actModeTogetherModelId = object.actModeTogetherModelId ?? undefined;
    message.actModeFireworksModelId = object.actModeFireworksModelId ?? undefined;
    message.actModeSapAiCoreModelId = object.actModeSapAiCoreModelId ?? undefined;
    message.actModeHuaweiCloudMaasModelId = object.actModeHuaweiCloudMaasModelId ?? undefined;
    message.actModeHuaweiCloudMaasModelInfo =
      (object.actModeHuaweiCloudMaasModelInfo !== undefined && object.actModeHuaweiCloudMaasModelInfo !== null)
        ? OpenRouterModelInfo.fromPartial(object.actModeHuaweiCloudMaasModelInfo)
        : undefined;
    message.actModeVercelAiGatewayModelId = object.actModeVercelAiGatewayModelId ?? undefined;
    message.actModeVercelAiGatewayModelInfo =
      (object.actModeVercelAiGatewayModelInfo !== undefined && object.actModeVercelAiGatewayModelInfo !== null)
        ? OpenRouterModelInfo.fromPartial(object.actModeVercelAiGatewayModelInfo)
        : undefined;
    message.actModeOcaModelId = object.actModeOcaModelId ?? undefined;
    message.actModeOcaModelInfo = (object.actModeOcaModelInfo !== undefined && object.actModeOcaModelInfo !== null)
      ? OcaModelInfo.fromPartial(object.actModeOcaModelInfo)
      : undefined;
    message.awsAuthentication = object.awsAuthentication ?? undefined;
    message.awsBedrockApiKey = object.awsBedrockApiKey ?? undefined;
    message.clineAccountId = object.clineAccountId ?? undefined;
    return message;
  },
};

function createBaseApiConfiguration_OpenAiHeadersEntry(): ApiConfiguration_OpenAiHeadersEntry {
  return { key: "", value: "" };
}

export const ApiConfiguration_OpenAiHeadersEntry: MessageFns<ApiConfiguration_OpenAiHeadersEntry> = {
  encode(message: ApiConfiguration_OpenAiHeadersEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiConfiguration_OpenAiHeadersEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiConfiguration_OpenAiHeadersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiConfiguration_OpenAiHeadersEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ApiConfiguration_OpenAiHeadersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiConfiguration_OpenAiHeadersEntry>, I>>(
    base?: I,
  ): ApiConfiguration_OpenAiHeadersEntry {
    return ApiConfiguration_OpenAiHeadersEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiConfiguration_OpenAiHeadersEntry>, I>>(
    object: I,
  ): ApiConfiguration_OpenAiHeadersEntry {
    const message = createBaseApiConfiguration_OpenAiHeadersEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseUpdateTerminalConnectionTimeoutRequest(): UpdateTerminalConnectionTimeoutRequest {
  return { timeoutMs: undefined };
}

export const UpdateTerminalConnectionTimeoutRequest: MessageFns<UpdateTerminalConnectionTimeoutRequest> = {
  encode(message: UpdateTerminalConnectionTimeoutRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timeoutMs !== undefined) {
      writer.uint32(8).int32(message.timeoutMs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTerminalConnectionTimeoutRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTerminalConnectionTimeoutRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.timeoutMs = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTerminalConnectionTimeoutRequest {
    return { timeoutMs: isSet(object.timeoutMs) ? globalThis.Number(object.timeoutMs) : undefined };
  },

  toJSON(message: UpdateTerminalConnectionTimeoutRequest): unknown {
    const obj: any = {};
    if (message.timeoutMs !== undefined) {
      obj.timeoutMs = Math.round(message.timeoutMs);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateTerminalConnectionTimeoutRequest>, I>>(
    base?: I,
  ): UpdateTerminalConnectionTimeoutRequest {
    return UpdateTerminalConnectionTimeoutRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateTerminalConnectionTimeoutRequest>, I>>(
    object: I,
  ): UpdateTerminalConnectionTimeoutRequest {
    const message = createBaseUpdateTerminalConnectionTimeoutRequest();
    message.timeoutMs = object.timeoutMs ?? undefined;
    return message;
  },
};

function createBaseFocusChainSettings(): FocusChainSettings {
  return { enabled: false, remindClineInterval: 0 };
}

export const FocusChainSettings: MessageFns<FocusChainSettings> = {
  encode(message: FocusChainSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enabled !== false) {
      writer.uint32(8).bool(message.enabled);
    }
    if (message.remindClineInterval !== 0) {
      writer.uint32(16).int32(message.remindClineInterval);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FocusChainSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFocusChainSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.remindClineInterval = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FocusChainSettings {
    return {
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      remindClineInterval: isSet(object.remindClineInterval) ? globalThis.Number(object.remindClineInterval) : 0,
    };
  },

  toJSON(message: FocusChainSettings): unknown {
    const obj: any = {};
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.remindClineInterval !== 0) {
      obj.remindClineInterval = Math.round(message.remindClineInterval);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FocusChainSettings>, I>>(base?: I): FocusChainSettings {
    return FocusChainSettings.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FocusChainSettings>, I>>(object: I): FocusChainSettings {
    const message = createBaseFocusChainSettings();
    message.enabled = object.enabled ?? false;
    message.remindClineInterval = object.remindClineInterval ?? 0;
    return message;
  },
};

function createBaseViewport(): Viewport {
  return { width: 0, height: 0 };
}

export const Viewport: MessageFns<Viewport> = {
  encode(message: Viewport, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.width !== 0) {
      writer.uint32(8).int32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(16).int32(message.height);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Viewport {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseViewport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.width = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.height = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Viewport {
    return {
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
    };
  },

  toJSON(message: Viewport): unknown {
    const obj: any = {};
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Viewport>, I>>(base?: I): Viewport {
    return Viewport.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Viewport>, I>>(object: I): Viewport {
    const message = createBaseViewport();
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    return message;
  },
};

function createBaseUpdateTerminalConnectionTimeoutResponse(): UpdateTerminalConnectionTimeoutResponse {
  return { timeoutMs: undefined };
}

export const UpdateTerminalConnectionTimeoutResponse: MessageFns<UpdateTerminalConnectionTimeoutResponse> = {
  encode(message: UpdateTerminalConnectionTimeoutResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timeoutMs !== undefined) {
      writer.uint32(8).int32(message.timeoutMs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTerminalConnectionTimeoutResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTerminalConnectionTimeoutResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.timeoutMs = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTerminalConnectionTimeoutResponse {
    return { timeoutMs: isSet(object.timeoutMs) ? globalThis.Number(object.timeoutMs) : undefined };
  },

  toJSON(message: UpdateTerminalConnectionTimeoutResponse): unknown {
    const obj: any = {};
    if (message.timeoutMs !== undefined) {
      obj.timeoutMs = Math.round(message.timeoutMs);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateTerminalConnectionTimeoutResponse>, I>>(
    base?: I,
  ): UpdateTerminalConnectionTimeoutResponse {
    return UpdateTerminalConnectionTimeoutResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateTerminalConnectionTimeoutResponse>, I>>(
    object: I,
  ): UpdateTerminalConnectionTimeoutResponse {
    const message = createBaseUpdateTerminalConnectionTimeoutResponse();
    message.timeoutMs = object.timeoutMs ?? undefined;
    return message;
  },
};

export type StateServiceDefinition = typeof StateServiceDefinition;
export const StateServiceDefinition = {
  name: "StateService",
  fullName: "cline.StateService",
  methods: {
    getLatestState: {
      name: "getLatestState",
      requestType: EmptyRequest,
      requestStream: false,
      responseType: State,
      responseStream: false,
      options: {},
    },
    updateTerminalConnectionTimeout: {
      name: "updateTerminalConnectionTimeout",
      requestType: UpdateTerminalConnectionTimeoutRequest,
      requestStream: false,
      responseType: UpdateTerminalConnectionTimeoutResponse,
      responseStream: false,
      options: {},
    },
    updateTerminalReuseEnabled: {
      name: "updateTerminalReuseEnabled",
      requestType: BooleanRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    getAvailableTerminalProfiles: {
      name: "getAvailableTerminalProfiles",
      requestType: EmptyRequest,
      requestStream: false,
      responseType: TerminalProfiles,
      responseStream: false,
      options: {},
    },
    subscribeToState: {
      name: "subscribeToState",
      requestType: EmptyRequest,
      requestStream: false,
      responseType: State,
      responseStream: true,
      options: {},
    },
    toggleFavoriteModel: {
      name: "toggleFavoriteModel",
      requestType: StringRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    resetState: {
      name: "resetState",
      requestType: ResetStateRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    togglePlanActModeProto: {
      name: "togglePlanActModeProto",
      requestType: TogglePlanActModeRequest,
      requestStream: false,
      responseType: Boolean,
      responseStream: false,
      options: {},
    },
    updateAutoApprovalSettings: {
      name: "updateAutoApprovalSettings",
      requestType: AutoApprovalSettingsRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    updateSettings: {
      name: "updateSettings",
      requestType: UpdateSettingsRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    updateTelemetrySetting: {
      name: "updateTelemetrySetting",
      requestType: TelemetrySettingRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    setWelcomeViewCompleted: {
      name: "setWelcomeViewCompleted",
      requestType: BooleanRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
  },
} as const;

export type StateServiceService = typeof StateServiceService;
export const StateServiceService = {
  getLatestState: {
    path: "/cline.StateService/getLatestState",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EmptyRequest) => Buffer.from(EmptyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => EmptyRequest.decode(value),
    responseSerialize: (value: State) => Buffer.from(State.encode(value).finish()),
    responseDeserialize: (value: Buffer) => State.decode(value),
  },
  updateTerminalConnectionTimeout: {
    path: "/cline.StateService/updateTerminalConnectionTimeout",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateTerminalConnectionTimeoutRequest) =>
      Buffer.from(UpdateTerminalConnectionTimeoutRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateTerminalConnectionTimeoutRequest.decode(value),
    responseSerialize: (value: UpdateTerminalConnectionTimeoutResponse) =>
      Buffer.from(UpdateTerminalConnectionTimeoutResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateTerminalConnectionTimeoutResponse.decode(value),
  },
  updateTerminalReuseEnabled: {
    path: "/cline.StateService/updateTerminalReuseEnabled",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: BooleanRequest) => Buffer.from(BooleanRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => BooleanRequest.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
  getAvailableTerminalProfiles: {
    path: "/cline.StateService/getAvailableTerminalProfiles",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EmptyRequest) => Buffer.from(EmptyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => EmptyRequest.decode(value),
    responseSerialize: (value: TerminalProfiles) => Buffer.from(TerminalProfiles.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TerminalProfiles.decode(value),
  },
  subscribeToState: {
    path: "/cline.StateService/subscribeToState",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: EmptyRequest) => Buffer.from(EmptyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => EmptyRequest.decode(value),
    responseSerialize: (value: State) => Buffer.from(State.encode(value).finish()),
    responseDeserialize: (value: Buffer) => State.decode(value),
  },
  toggleFavoriteModel: {
    path: "/cline.StateService/toggleFavoriteModel",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: StringRequest) => Buffer.from(StringRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => StringRequest.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
  resetState: {
    path: "/cline.StateService/resetState",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ResetStateRequest) => Buffer.from(ResetStateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ResetStateRequest.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
  togglePlanActModeProto: {
    path: "/cline.StateService/togglePlanActModeProto",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TogglePlanActModeRequest) => Buffer.from(TogglePlanActModeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => TogglePlanActModeRequest.decode(value),
    responseSerialize: (value: Boolean) => Buffer.from(Boolean.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Boolean.decode(value),
  },
  updateAutoApprovalSettings: {
    path: "/cline.StateService/updateAutoApprovalSettings",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AutoApprovalSettingsRequest) =>
      Buffer.from(AutoApprovalSettingsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AutoApprovalSettingsRequest.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
  updateSettings: {
    path: "/cline.StateService/updateSettings",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateSettingsRequest) => Buffer.from(UpdateSettingsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateSettingsRequest.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
  updateTelemetrySetting: {
    path: "/cline.StateService/updateTelemetrySetting",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TelemetrySettingRequest) => Buffer.from(TelemetrySettingRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => TelemetrySettingRequest.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
  setWelcomeViewCompleted: {
    path: "/cline.StateService/setWelcomeViewCompleted",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: BooleanRequest) => Buffer.from(BooleanRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => BooleanRequest.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
} as const;

export interface StateServiceServer extends UntypedServiceImplementation {
  getLatestState: handleUnaryCall<EmptyRequest, State>;
  updateTerminalConnectionTimeout: handleUnaryCall<
    UpdateTerminalConnectionTimeoutRequest,
    UpdateTerminalConnectionTimeoutResponse
  >;
  updateTerminalReuseEnabled: handleUnaryCall<BooleanRequest, Empty>;
  getAvailableTerminalProfiles: handleUnaryCall<EmptyRequest, TerminalProfiles>;
  subscribeToState: handleServerStreamingCall<EmptyRequest, State>;
  toggleFavoriteModel: handleUnaryCall<StringRequest, Empty>;
  resetState: handleUnaryCall<ResetStateRequest, Empty>;
  togglePlanActModeProto: handleUnaryCall<TogglePlanActModeRequest, Boolean>;
  updateAutoApprovalSettings: handleUnaryCall<AutoApprovalSettingsRequest, Empty>;
  updateSettings: handleUnaryCall<UpdateSettingsRequest, Empty>;
  updateTelemetrySetting: handleUnaryCall<TelemetrySettingRequest, Empty>;
  setWelcomeViewCompleted: handleUnaryCall<BooleanRequest, Empty>;
}

export interface StateServiceClient extends Client {
  getLatestState(
    request: EmptyRequest,
    callback: (error: ServiceError | null, response: State) => void,
  ): ClientUnaryCall;
  getLatestState(
    request: EmptyRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: State) => void,
  ): ClientUnaryCall;
  getLatestState(
    request: EmptyRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: State) => void,
  ): ClientUnaryCall;
  updateTerminalConnectionTimeout(
    request: UpdateTerminalConnectionTimeoutRequest,
    callback: (error: ServiceError | null, response: UpdateTerminalConnectionTimeoutResponse) => void,
  ): ClientUnaryCall;
  updateTerminalConnectionTimeout(
    request: UpdateTerminalConnectionTimeoutRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateTerminalConnectionTimeoutResponse) => void,
  ): ClientUnaryCall;
  updateTerminalConnectionTimeout(
    request: UpdateTerminalConnectionTimeoutRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateTerminalConnectionTimeoutResponse) => void,
  ): ClientUnaryCall;
  updateTerminalReuseEnabled(
    request: BooleanRequest,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  updateTerminalReuseEnabled(
    request: BooleanRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  updateTerminalReuseEnabled(
    request: BooleanRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  getAvailableTerminalProfiles(
    request: EmptyRequest,
    callback: (error: ServiceError | null, response: TerminalProfiles) => void,
  ): ClientUnaryCall;
  getAvailableTerminalProfiles(
    request: EmptyRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TerminalProfiles) => void,
  ): ClientUnaryCall;
  getAvailableTerminalProfiles(
    request: EmptyRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TerminalProfiles) => void,
  ): ClientUnaryCall;
  subscribeToState(request: EmptyRequest, options?: Partial<CallOptions>): ClientReadableStream<State>;
  subscribeToState(
    request: EmptyRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<State>;
  toggleFavoriteModel(
    request: StringRequest,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  toggleFavoriteModel(
    request: StringRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  toggleFavoriteModel(
    request: StringRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  resetState(
    request: ResetStateRequest,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  resetState(
    request: ResetStateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  resetState(
    request: ResetStateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  togglePlanActModeProto(
    request: TogglePlanActModeRequest,
    callback: (error: ServiceError | null, response: Boolean) => void,
  ): ClientUnaryCall;
  togglePlanActModeProto(
    request: TogglePlanActModeRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Boolean) => void,
  ): ClientUnaryCall;
  togglePlanActModeProto(
    request: TogglePlanActModeRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Boolean) => void,
  ): ClientUnaryCall;
  updateAutoApprovalSettings(
    request: AutoApprovalSettingsRequest,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  updateAutoApprovalSettings(
    request: AutoApprovalSettingsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  updateAutoApprovalSettings(
    request: AutoApprovalSettingsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  updateSettings(
    request: UpdateSettingsRequest,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  updateSettings(
    request: UpdateSettingsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  updateSettings(
    request: UpdateSettingsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  updateTelemetrySetting(
    request: TelemetrySettingRequest,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  updateTelemetrySetting(
    request: TelemetrySettingRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  updateTelemetrySetting(
    request: TelemetrySettingRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  setWelcomeViewCompleted(
    request: BooleanRequest,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  setWelcomeViewCompleted(
    request: BooleanRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  setWelcomeViewCompleted(
    request: BooleanRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
}

export const StateServiceClient = makeGenericClientConstructor(
  StateServiceService,
  "cline.StateService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): StateServiceClient;
  service: typeof StateServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
