// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.19.1
// source: cline/slash.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Empty, StringRequest } from "./common";

/** SlashService provides methods for managing slash */
export type SlashServiceDefinition = typeof SlashServiceDefinition;
export const SlashServiceDefinition = {
  name: "SlashService",
  fullName: "cline.SlashService",
  methods: {
    /** Sends button click message */
    reportBug: {
      name: "reportBug",
      requestType: StringRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    condense: {
      name: "condense",
      requestType: StringRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
  },
} as const;

/** SlashService provides methods for managing slash */
export type SlashServiceService = typeof SlashServiceService;
export const SlashServiceService = {
  /** Sends button click message */
  reportBug: {
    path: "/cline.SlashService/reportBug",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: StringRequest) => Buffer.from(StringRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => StringRequest.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
  condense: {
    path: "/cline.SlashService/condense",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: StringRequest) => Buffer.from(StringRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => StringRequest.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
} as const;

export interface SlashServiceServer extends UntypedServiceImplementation {
  /** Sends button click message */
  reportBug: handleUnaryCall<StringRequest, Empty>;
  condense: handleUnaryCall<StringRequest, Empty>;
}

export interface SlashServiceClient extends Client {
  /** Sends button click message */
  reportBug(request: StringRequest, callback: (error: ServiceError | null, response: Empty) => void): ClientUnaryCall;
  reportBug(
    request: StringRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  reportBug(
    request: StringRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  condense(request: StringRequest, callback: (error: ServiceError | null, response: Empty) => void): ClientUnaryCall;
  condense(
    request: StringRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  condense(
    request: StringRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
}

export const SlashServiceClient = makeGenericClientConstructor(
  SlashServiceService,
  "cline.SlashService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): SlashServiceClient;
  service: typeof SlashServiceService;
  serviceName: string;
};
